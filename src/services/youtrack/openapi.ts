/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/activities": {
    get: {
      parameters?: {
          /**
           * @description Indicates whether the order of returning activities is from newest to oldest or the opposite.
           * If "false", then the oldest activity item that matches a selected filter is returned first.
           * If "true", then the newest activity is returned first. By default, "false".
           */
          /**
           * @description Start timestamp of the time interval the activity timestamp belongs to.
           * If the parameter is not set, it is considered to be 0.
           */
          /**
           * @description End timestamp of the time interval the activity timestamp belongs to.
           * If the parameter is not set, it is considered as Long.MAX_VALUE.
           */
          /**
           * @description Parameter to filter activities by the author. The database id or login, or Hub id,
           * or 'me' for the current logged in user could be specified.
           */
          /** @description Issues search query. Read more about <a href="Search-and-Command-Attributes.xml">search syntax</a>. */
        query?: {
          categories?: string;
          reverse?: boolean;
          start?: string;
          end?: string;
          author?: string;
          issueQuery?: string;
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of ActivityItem */
        200: {
          content: {
            "application/json": (components["schemas"]["ActivityItem"])[];
          };
        };
      };
    };
  };
  "/activities/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single ActivityItem */
        200: {
          content: {
            "application/json": components["schemas"]["ActivityItem"];
          };
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/activitiesPage": {
    get: {
      parameters?: {
          /**
           * @description Indicates whether the order of returning activities is from newest to oldest or the opposite.
           * If "false", then the oldest activity item that matches a selected filter is returned first.
           * If "true", then the newest activity is returned first. By default, "false".
           */
          /**
           * @description Start timestamp of the time interval the activity timestamp belongs to.
           * If the parameter is not set, it is considered to be 0.
           */
          /**
           * @description End timestamp of the time interval the activity timestamp belongs to.
           * If the parameter is not set, it is considered as Long.MAX_VALUE.
           */
          /**
           * @description Parameter to filter activities by the author. The database id or login, or Hub id,
           * or 'me' for the current logged in user could be specified.
           */
          /** @description Issues search query. Read more about <a href="Search-and-Command-Attributes.xml">search syntax</a>. */
          /** @description ID of the activity that should be included in the page. The activity is allocated to the middle of the page. */
        query?: {
          categories?: string;
          reverse?: boolean;
          start?: string;
          end?: string;
          author?: string;
          issueQuery?: string;
          cursor?: string;
          activityId?: string;
          fields?: string;
        };
      };
      responses: {
        /** @description single ActivityCursorPage */
        200: {
          content: {
            "application/json": components["schemas"]["ActivityCursorPage"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/build": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of BuildBundle */
        200: {
          content: {
            "application/json": (components["schemas"]["BuildBundle"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["BuildBundle"];
        };
      };
      responses: {
        /** @description single BuildBundle */
        200: {
          content: {
            "application/json": components["schemas"]["BuildBundle"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/build/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single BuildBundle */
        200: {
          content: {
            "application/json": components["schemas"]["BuildBundle"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["BuildBundle"];
        };
      };
      responses: {
        /** @description single BuildBundle */
        200: {
          content: {
            "application/json": components["schemas"]["BuildBundle"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/admin/customFieldSettings/bundles/build/{id}/values": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of BuildBundleElement */
        200: {
          content: {
            "application/json": (components["schemas"]["BuildBundleElement"])[];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["BuildBundleElement"];
        };
      };
      responses: {
        /** @description single BuildBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["BuildBundleElement"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/build/{id}/values/{buildBundleElementId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          buildBundleElementId: string;
        };
      };
      responses: {
        /** @description single BuildBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["BuildBundleElement"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          buildBundleElementId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["BuildBundleElement"];
        };
      };
      responses: {
        /** @description single BuildBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["BuildBundleElement"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          buildBundleElementId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        buildBundleElementId: string;
      };
    };
  };
  "/admin/customFieldSettings/bundles/enum": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of EnumBundle */
        200: {
          content: {
            "application/json": (components["schemas"]["EnumBundle"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["EnumBundle"];
        };
      };
      responses: {
        /** @description single EnumBundle */
        200: {
          content: {
            "application/json": components["schemas"]["EnumBundle"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/enum/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single EnumBundle */
        200: {
          content: {
            "application/json": components["schemas"]["EnumBundle"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["EnumBundle"];
        };
      };
      responses: {
        /** @description single EnumBundle */
        200: {
          content: {
            "application/json": components["schemas"]["EnumBundle"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/admin/customFieldSettings/bundles/enum/{id}/values": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of EnumBundleElement */
        200: {
          content: {
            "application/json": (components["schemas"]["EnumBundleElement"])[];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["EnumBundleElement"];
        };
      };
      responses: {
        /** @description single EnumBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["EnumBundleElement"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/enum/{id}/values/{enumBundleElementId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          enumBundleElementId: string;
        };
      };
      responses: {
        /** @description single EnumBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["EnumBundleElement"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          enumBundleElementId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["EnumBundleElement"];
        };
      };
      responses: {
        /** @description single EnumBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["EnumBundleElement"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          enumBundleElementId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        enumBundleElementId: string;
      };
    };
  };
  "/admin/customFieldSettings/bundles/ownedField": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of OwnedBundle */
        200: {
          content: {
            "application/json": (components["schemas"]["OwnedBundle"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["OwnedBundle"];
        };
      };
      responses: {
        /** @description single OwnedBundle */
        200: {
          content: {
            "application/json": components["schemas"]["OwnedBundle"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/ownedField/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single OwnedBundle */
        200: {
          content: {
            "application/json": components["schemas"]["OwnedBundle"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["OwnedBundle"];
        };
      };
      responses: {
        /** @description single OwnedBundle */
        200: {
          content: {
            "application/json": components["schemas"]["OwnedBundle"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/admin/customFieldSettings/bundles/ownedField/{id}/values": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of OwnedBundleElement */
        200: {
          content: {
            "application/json": (components["schemas"]["OwnedBundleElement"])[];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["OwnedBundleElement"];
        };
      };
      responses: {
        /** @description single OwnedBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["OwnedBundleElement"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/ownedField/{id}/values/{ownedBundleElementId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          ownedBundleElementId: string;
        };
      };
      responses: {
        /** @description single OwnedBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["OwnedBundleElement"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          ownedBundleElementId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["OwnedBundleElement"];
        };
      };
      responses: {
        /** @description single OwnedBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["OwnedBundleElement"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          ownedBundleElementId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        ownedBundleElementId: string;
      };
    };
  };
  "/admin/customFieldSettings/bundles/state": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of StateBundle */
        200: {
          content: {
            "application/json": (components["schemas"]["StateBundle"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["StateBundle"];
        };
      };
      responses: {
        /** @description single StateBundle */
        200: {
          content: {
            "application/json": components["schemas"]["StateBundle"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/state/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single StateBundle */
        200: {
          content: {
            "application/json": components["schemas"]["StateBundle"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["StateBundle"];
        };
      };
      responses: {
        /** @description single StateBundle */
        200: {
          content: {
            "application/json": components["schemas"]["StateBundle"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/admin/customFieldSettings/bundles/state/{id}/values": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of StateBundleElement */
        200: {
          content: {
            "application/json": (components["schemas"]["StateBundleElement"])[];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["StateBundleElement"];
        };
      };
      responses: {
        /** @description single StateBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["StateBundleElement"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/state/{id}/values/{stateBundleElementId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          stateBundleElementId: string;
        };
      };
      responses: {
        /** @description single StateBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["StateBundleElement"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          stateBundleElementId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["StateBundleElement"];
        };
      };
      responses: {
        /** @description single StateBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["StateBundleElement"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          stateBundleElementId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        stateBundleElementId: string;
      };
    };
  };
  "/admin/customFieldSettings/bundles/user": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of UserBundle */
        200: {
          content: {
            "application/json": (components["schemas"]["UserBundle"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UserBundle"];
        };
      };
      responses: {
        /** @description single UserBundle */
        200: {
          content: {
            "application/json": components["schemas"]["UserBundle"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/user/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single UserBundle */
        200: {
          content: {
            "application/json": components["schemas"]["UserBundle"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UserBundle"];
        };
      };
      responses: {
        /** @description single UserBundle */
        200: {
          content: {
            "application/json": components["schemas"]["UserBundle"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/admin/customFieldSettings/bundles/user/{id}/aggregatedUsers": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of User */
        200: {
          content: {
            "application/json": (components["schemas"]["User"])[];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/user/{id}/aggregatedUsers/{userId}": {
    parameters: {
      path: {
        id: string;
        userId: string;
      };
    };
  };
  "/admin/customFieldSettings/bundles/user/{id}/groups": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of UserGroup */
        200: {
          content: {
            "application/json": (components["schemas"]["UserGroup"])[];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UserGroup"];
        };
      };
      responses: {
        /** @description single UserGroup */
        200: {
          content: {
            "application/json": components["schemas"]["UserGroup"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/user/{id}/groups/{userGroupId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          userGroupId: string;
        };
      };
      responses: {
        /** @description single UserGroup */
        200: {
          content: {
            "application/json": components["schemas"]["UserGroup"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          userGroupId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        userGroupId: string;
      };
    };
  };
  "/admin/customFieldSettings/bundles/user/{id}/individuals": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of User */
        200: {
          content: {
            "application/json": (components["schemas"]["User"])[];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      responses: {
        /** @description single User */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/user/{id}/individuals/{userId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          userId: string;
        };
      };
      responses: {
        /** @description single User */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          userId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        userId: string;
      };
    };
  };
  "/admin/customFieldSettings/bundles/version": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of VersionBundle */
        200: {
          content: {
            "application/json": (components["schemas"]["VersionBundle"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["VersionBundle"];
        };
      };
      responses: {
        /** @description single VersionBundle */
        200: {
          content: {
            "application/json": components["schemas"]["VersionBundle"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/version/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single VersionBundle */
        200: {
          content: {
            "application/json": components["schemas"]["VersionBundle"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["VersionBundle"];
        };
      };
      responses: {
        /** @description single VersionBundle */
        200: {
          content: {
            "application/json": components["schemas"]["VersionBundle"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/admin/customFieldSettings/bundles/version/{id}/values": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of VersionBundleElement */
        200: {
          content: {
            "application/json": (components["schemas"]["VersionBundleElement"])[];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["VersionBundleElement"];
        };
      };
      responses: {
        /** @description single VersionBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["VersionBundleElement"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/bundles/version/{id}/values/{versionBundleElementId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          versionBundleElementId: string;
        };
      };
      responses: {
        /** @description single VersionBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["VersionBundleElement"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          versionBundleElementId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["VersionBundleElement"];
        };
      };
      responses: {
        /** @description single VersionBundleElement */
        200: {
          content: {
            "application/json": components["schemas"]["VersionBundleElement"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          versionBundleElementId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        versionBundleElementId: string;
      };
    };
  };
  "/admin/customFieldSettings/customFields": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of CustomField */
        200: {
          content: {
            "application/json": (components["schemas"]["CustomField"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CustomField"];
        };
      };
      responses: {
        /** @description single CustomField */
        200: {
          content: {
            "application/json": components["schemas"]["CustomField"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/customFields/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single CustomField */
        200: {
          content: {
            "application/json": components["schemas"]["CustomField"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CustomField"];
        };
      };
      responses: {
        /** @description single CustomField */
        200: {
          content: {
            "application/json": components["schemas"]["CustomField"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/admin/customFieldSettings/customFields/{id}/fieldDefaults": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single CustomFieldDefaults */
        200: {
          content: {
            "application/json": components["schemas"]["CustomFieldDefaults"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CustomFieldDefaults"];
        };
      };
      responses: {
        /** @description single CustomFieldDefaults */
        200: {
          content: {
            "application/json": components["schemas"]["CustomFieldDefaults"];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/customFields/{id}/instances": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of ProjectCustomField */
        200: {
          content: {
            "application/json": (components["schemas"]["ProjectCustomField"])[];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/customFields/{id}/instances/{projectCustomFieldId}": {
    parameters: {
      path: {
        id: string;
        projectCustomFieldId: string;
      };
    };
  };
  "/admin/customFieldSettings/types": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of FieldType */
        200: {
          content: {
            "application/json": (components["schemas"]["FieldType"])[];
          };
        };
      };
    };
  };
  "/admin/customFieldSettings/types/{id}": {
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/admin/databaseBackup/backups": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of BackupFile */
        200: {
          content: {
            "application/json": (components["schemas"]["BackupFile"])[];
          };
        };
      };
    };
  };
  "/admin/databaseBackup/backups/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single BackupFile */
        200: {
          content: {
            "application/json": components["schemas"]["BackupFile"];
          };
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/admin/databaseBackup/settings": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      responses: {
        /** @description single DatabaseBackupSettings */
        200: {
          content: {
            "application/json": components["schemas"]["DatabaseBackupSettings"];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["DatabaseBackupSettings"];
        };
      };
      responses: {
        /** @description single DatabaseBackupSettings */
        200: {
          content: {
            "application/json": components["schemas"]["DatabaseBackupSettings"];
          };
        };
      };
    };
  };
  "/admin/databaseBackup/settings/backupStatus": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      responses: {
        /** @description single BackupStatus */
        200: {
          content: {
            "application/json": components["schemas"]["BackupStatus"];
          };
        };
      };
    };
  };
  "/admin/globalSettings": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      responses: {
        /** @description single GlobalSettings */
        200: {
          content: {
            "application/json": components["schemas"]["GlobalSettings"];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["GlobalSettings"];
        };
      };
      responses: {
        /** @description single GlobalSettings */
        200: {
          content: {
            "application/json": components["schemas"]["GlobalSettings"];
          };
        };
      };
    };
  };
  "/admin/globalSettings/appearanceSettings": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      responses: {
        /** @description single AppearanceSettings */
        200: {
          content: {
            "application/json": components["schemas"]["AppearanceSettings"];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["AppearanceSettings"];
        };
      };
      responses: {
        /** @description single AppearanceSettings */
        200: {
          content: {
            "application/json": components["schemas"]["AppearanceSettings"];
          };
        };
      };
    };
  };
  "/admin/globalSettings/license": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      responses: {
        /** @description single License */
        200: {
          content: {
            "application/json": components["schemas"]["License"];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["License"];
        };
      };
      responses: {
        /** @description single License */
        200: {
          content: {
            "application/json": components["schemas"]["License"];
          };
        };
      };
    };
  };
  "/admin/globalSettings/localeSettings": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      responses: {
        /** @description single LocaleSettings */
        200: {
          content: {
            "application/json": components["schemas"]["LocaleSettings"];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["LocaleSettings"];
        };
      };
      responses: {
        /** @description single LocaleSettings */
        200: {
          content: {
            "application/json": components["schemas"]["LocaleSettings"];
          };
        };
      };
    };
  };
  "/admin/globalSettings/notificationSettings": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      responses: {
        /** @description single NotificationSettings */
        200: {
          content: {
            "application/json": components["schemas"]["NotificationSettings"];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["NotificationSettings"];
        };
      };
      responses: {
        /** @description single NotificationSettings */
        200: {
          content: {
            "application/json": components["schemas"]["NotificationSettings"];
          };
        };
      };
    };
  };
  "/admin/globalSettings/restSettings": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      responses: {
        /** @description single RestCorsSettings */
        200: {
          content: {
            "application/json": components["schemas"]["RestCorsSettings"];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RestCorsSettings"];
        };
      };
      responses: {
        /** @description single RestCorsSettings */
        200: {
          content: {
            "application/json": components["schemas"]["RestCorsSettings"];
          };
        };
      };
    };
  };
  "/admin/globalSettings/systemSettings": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      responses: {
        /** @description single SystemSettings */
        200: {
          content: {
            "application/json": components["schemas"]["SystemSettings"];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SystemSettings"];
        };
      };
      responses: {
        /** @description single SystemSettings */
        200: {
          content: {
            "application/json": components["schemas"]["SystemSettings"];
          };
        };
      };
    };
  };
  "/admin/projects": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of Project */
        200: {
          content: {
            "application/json": (components["schemas"]["Project"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
          /**
           * @description If the `template` is not specified, then the new project will use the default settings.
           * <emphasis>Optional</emphasis>. Lets you specify the template to use for the new project.
           * Possible values: `scrum`, `kanban`.
           */
        query?: {
          template?: string;
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      responses: {
        /** @description single Project */
        200: {
          content: {
            "application/json": components["schemas"]["Project"];
          };
        };
      };
    };
  };
  "/admin/projects/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single Project */
        200: {
          content: {
            "application/json": components["schemas"]["Project"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      responses: {
        /** @description single Project */
        200: {
          content: {
            "application/json": components["schemas"]["Project"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/admin/projects/{id}/customFields": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of ProjectCustomField */
        200: {
          content: {
            "application/json": (components["schemas"]["ProjectCustomField"])[];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ProjectCustomField"];
        };
      };
      responses: {
        /** @description single ProjectCustomField */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectCustomField"];
          };
        };
      };
    };
  };
  "/admin/projects/{id}/customFields/{projectCustomFieldId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          projectCustomFieldId: string;
        };
      };
      responses: {
        /** @description single ProjectCustomField */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectCustomField"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          projectCustomFieldId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ProjectCustomField"];
        };
      };
      responses: {
        /** @description single ProjectCustomField */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectCustomField"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          projectCustomFieldId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        projectCustomFieldId: string;
      };
    };
  };
  "/admin/projects/{id}/issues": {
    get: {
      parameters: {
          /** @description <p>The name of the custom field to show in the response. When you use this parameter and request the custom field data in the request URL, the response only shows the requested custom fields instead of all of them.</p><p>To show more than one custom field, use this parameter several times.</p><p>See Sample 2 for reference.</p> */
        query?: {
          customFields?: string;
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of Issue */
        200: {
          content: {
            "application/json": (components["schemas"]["Issue"])[];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Issue"];
        };
      };
      responses: {
        /** @description single Issue */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
      };
    };
  };
  "/admin/projects/{id}/issues/{issueId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          issueId: string;
        };
      };
      responses: {
        /** @description single Issue */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
          issueId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Issue"];
        };
      };
      responses: {
        /** @description single Issue */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          issueId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        issueId: string;
      };
    };
  };
  "/admin/projects/{id}/timeTrackingSettings": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single ProjectTimeTrackingSettings */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectTimeTrackingSettings"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ProjectTimeTrackingSettings"];
        };
      };
      responses: {
        /** @description single ProjectTimeTrackingSettings */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectTimeTrackingSettings"];
          };
        };
      };
    };
  };
  "/admin/projects/{id}/timeTrackingSettings/workItemTypes": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of WorkItemType */
        200: {
          content: {
            "application/json": (components["schemas"]["WorkItemType"])[];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["WorkItemType"];
        };
      };
      responses: {
        /** @description single WorkItemType */
        200: {
          content: {
            "application/json": components["schemas"]["WorkItemType"];
          };
        };
      };
    };
  };
  "/admin/projects/{id}/timeTrackingSettings/workItemTypes/{workItemTypeId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          workItemTypeId: string;
        };
      };
      responses: {
        /** @description single WorkItemType */
        200: {
          content: {
            "application/json": components["schemas"]["WorkItemType"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          workItemTypeId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        workItemTypeId: string;
      };
    };
  };
  "/admin/telemetry": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      responses: {
        /** @description single Telemetry */
        200: {
          content: {
            "application/json": components["schemas"]["Telemetry"];
          };
        };
      };
    };
  };
  "/admin/timeTrackingSettings": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      responses: {
        /** @description single GlobalTimeTrackingSettings */
        200: {
          content: {
            "application/json": components["schemas"]["GlobalTimeTrackingSettings"];
          };
        };
      };
    };
  };
  "/admin/timeTrackingSettings/workItemTypes": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of WorkItemType */
        200: {
          content: {
            "application/json": (components["schemas"]["WorkItemType"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["WorkItemType"];
        };
      };
      responses: {
        /** @description single WorkItemType */
        200: {
          content: {
            "application/json": components["schemas"]["WorkItemType"];
          };
        };
      };
    };
  };
  "/admin/timeTrackingSettings/workItemTypes/{workItemTypeId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          workItemTypeId: string;
        };
      };
      responses: {
        /** @description single WorkItemType */
        200: {
          content: {
            "application/json": components["schemas"]["WorkItemType"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          workItemTypeId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["WorkItemType"];
        };
      };
      responses: {
        /** @description single WorkItemType */
        200: {
          content: {
            "application/json": components["schemas"]["WorkItemType"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          workItemTypeId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        workItemTypeId: string;
      };
    };
  };
  "/admin/timeTrackingSettings/workTimeSettings": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      responses: {
        /** @description single WorkTimeSettings */
        200: {
          content: {
            "application/json": components["schemas"]["WorkTimeSettings"];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["WorkTimeSettings"];
        };
      };
      responses: {
        /** @description single WorkTimeSettings */
        200: {
          content: {
            "application/json": components["schemas"]["WorkTimeSettings"];
          };
        };
      };
    };
  };
  "/agiles": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of Agile */
        200: {
          content: {
            "application/json": (components["schemas"]["Agile"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
          /** @description The name of the board template that should be used. Possible values: `kanban`, `scrum`, `version`, `custom`, `personal`. */
        query?: {
          template?: string;
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Agile"];
        };
      };
      responses: {
        /** @description single Agile */
        200: {
          content: {
            "application/json": components["schemas"]["Agile"];
          };
        };
      };
    };
  };
  "/agiles/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single Agile */
        200: {
          content: {
            "application/json": components["schemas"]["Agile"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Agile"];
        };
      };
      responses: {
        /** @description single Agile */
        200: {
          content: {
            "application/json": components["schemas"]["Agile"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/agiles/{id}/sprints": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of Sprint */
        200: {
          content: {
            "application/json": (components["schemas"]["Sprint"])[];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sprint"];
        };
      };
      responses: {
        /** @description single Sprint */
        200: {
          content: {
            "application/json": components["schemas"]["Sprint"];
          };
        };
      };
    };
  };
  "/agiles/{id}/sprints/{sprintId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          sprintId: string;
        };
      };
      responses: {
        /** @description single Sprint */
        200: {
          content: {
            "application/json": components["schemas"]["Sprint"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          sprintId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sprint"];
        };
      };
      responses: {
        /** @description single Sprint */
        200: {
          content: {
            "application/json": components["schemas"]["Sprint"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          sprintId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        sprintId: string;
      };
    };
  };
  "/articles": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of Article */
        200: {
          content: {
            "application/json": (components["schemas"]["Article"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
          /** @description ID of a draft to publish as a new article. If no `draftId` is provided, the article is created from scratch. In this case, you must specify the project in the request payload. */
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires Apply Commands Silently permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          draftId?: string;
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Article"];
        };
      };
      responses: {
        /** @description single Article */
        200: {
          content: {
            "application/json": components["schemas"]["Article"];
          };
        };
      };
    };
  };
  "/articles/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single Article */
        200: {
          content: {
            "application/json": components["schemas"]["Article"];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires Apply Commands Silently permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Article"];
        };
      };
      responses: {
        /** @description single Article */
        200: {
          content: {
            "application/json": components["schemas"]["Article"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/articles/{id}/attachments": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of ArticleAttachment */
        200: {
          content: {
            "application/json": (components["schemas"]["ArticleAttachment"])[];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ArticleAttachment"];
        };
      };
      responses: {
        /** @description single ArticleAttachment */
        200: {
          content: {
            "application/json": components["schemas"]["ArticleAttachment"];
          };
        };
      };
    };
  };
  "/articles/{id}/attachments/{articleAttachmentId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          articleAttachmentId: string;
        };
      };
      responses: {
        /** @description single ArticleAttachment */
        200: {
          content: {
            "application/json": components["schemas"]["ArticleAttachment"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          articleAttachmentId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ArticleAttachment"];
        };
      };
      responses: {
        /** @description single ArticleAttachment */
        200: {
          content: {
            "application/json": components["schemas"]["ArticleAttachment"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          articleAttachmentId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        articleAttachmentId: string;
      };
    };
  };
  "/articles/{id}/childArticles": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of Article */
        200: {
          content: {
            "application/json": (components["schemas"]["Article"])[];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires Apply Commands Silently permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Article"];
        };
      };
      responses: {
        /** @description single Article */
        200: {
          content: {
            "application/json": components["schemas"]["Article"];
          };
        };
      };
    };
  };
  "/articles/{id}/childArticles/{articleId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          articleId: string;
        };
      };
      responses: {
        /** @description single Article */
        200: {
          content: {
            "application/json": components["schemas"]["Article"];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires Apply Commands Silently permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
          articleId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Article"];
        };
      };
      responses: {
        /** @description single Article */
        200: {
          content: {
            "application/json": components["schemas"]["Article"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          articleId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        articleId: string;
      };
    };
  };
  "/articles/{id}/comments": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of ArticleComment */
        200: {
          content: {
            "application/json": (components["schemas"]["ArticleComment"])[];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description The ID of an existing draft that should be published. This parameter is optional. */
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          draftId?: string;
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ArticleComment"];
        };
      };
      responses: {
        /** @description single ArticleComment */
        200: {
          content: {
            "application/json": components["schemas"]["ArticleComment"];
          };
        };
      };
    };
  };
  "/articles/{id}/comments/{articleCommentId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          articleCommentId: string;
        };
      };
      responses: {
        /** @description single ArticleComment */
        200: {
          content: {
            "application/json": components["schemas"]["ArticleComment"];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
          articleCommentId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ArticleComment"];
        };
      };
      responses: {
        /** @description single ArticleComment */
        200: {
          content: {
            "application/json": components["schemas"]["ArticleComment"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          articleCommentId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        articleCommentId: string;
      };
    };
  };
  "/articles/{id}/parentArticle": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single Article */
        200: {
          content: {
            "application/json": components["schemas"]["Article"];
          };
        };
      };
    };
  };
  "/commands": {
    post: {
      parameters?: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CommandList"];
        };
      };
      responses: {
        /** @description single CommandList */
        200: {
          content: {
            "application/json": components["schemas"]["CommandList"];
          };
        };
      };
    };
  };
  "/commands/assist": {
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CommandList"];
        };
      };
      responses: {
        /** @description single CommandList */
        200: {
          content: {
            "application/json": components["schemas"]["CommandList"];
          };
        };
      };
    };
  };
  "/groups": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of UserGroup */
        200: {
          content: {
            "application/json": (components["schemas"]["UserGroup"])[];
          };
        };
      };
    };
  };
  "/groups/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single UserGroup */
        200: {
          content: {
            "application/json": components["schemas"]["UserGroup"];
          };
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/issueLinkTypes": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of IssueLinkType */
        200: {
          content: {
            "application/json": (components["schemas"]["IssueLinkType"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["IssueLinkType"];
        };
      };
      responses: {
        /** @description single IssueLinkType */
        200: {
          content: {
            "application/json": components["schemas"]["IssueLinkType"];
          };
        };
      };
    };
  };
  "/issueLinkTypes/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single IssueLinkType */
        200: {
          content: {
            "application/json": components["schemas"]["IssueLinkType"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["IssueLinkType"];
        };
      };
      responses: {
        /** @description single IssueLinkType */
        200: {
          content: {
            "application/json": components["schemas"]["IssueLinkType"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/issueTags": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of IssueTag */
        200: {
          content: {
            "application/json": (components["schemas"]["IssueTag"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["IssueTag"];
        };
      };
      responses: {
        /** @description single IssueTag */
        200: {
          content: {
            "application/json": components["schemas"]["IssueTag"];
          };
        };
      };
    };
  };
  "/issueTags/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single IssueTag */
        200: {
          content: {
            "application/json": components["schemas"]["IssueTag"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["IssueTag"];
        };
      };
      responses: {
        /** @description single IssueTag */
        200: {
          content: {
            "application/json": components["schemas"]["IssueTag"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/issueTags/{id}/issues": {
    get: {
      parameters: {
          /** @description <p>The name of the custom field to show in the response. When you use this parameter and request the custom field data in the request URL, the response only shows the requested custom fields instead of all of them.</p><p>To show more than one custom field, use this parameter several times.</p><p>See Sample 2 for reference.</p> */
        query?: {
          customFields?: string;
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of Issue */
        200: {
          content: {
            "application/json": (components["schemas"]["Issue"])[];
          };
        };
      };
    };
  };
  "/issueTags/{id}/issues/{issueId}": {
    parameters: {
      path: {
        id: string;
        issueId: string;
      };
    };
  };
  "/issues": {
    get: {
      parameters?: {
          /** @description Issues search query. Read more about search syntax here: <a href="https://www.jetbrains.com/help/youtrack/cloud/?Search-and-Command-Attributes">Search Query Reference</a> */
          /** @description <p>The name of the custom field to show in the response. When you use this parameter and request the custom field data in the request URL, the response only shows the requested custom fields instead of all of them.</p><p>To show more than one custom field, use this parameter several times.</p><p>See Sample 2 for reference.</p> */
        query?: {
          query?: string;
          customFields?: string;
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of Issue */
        200: {
          content: {
            "application/json": (components["schemas"]["Issue"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
          /** @description ID of a draft to report as the new issue. If no `draftId` is provided, the issue is created from scratch. In this case, you must specify the project in the request payload. */
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          draftId?: string;
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Issue"];
        };
      };
      responses: {
        /** @description single Issue */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
      };
    };
  };
  "/issues/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single Issue */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Issue"];
        };
      };
      responses: {
        /** @description single Issue */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/issues/{id}/activities": {
    get: {
      parameters: {
          /**
           * @description Indicates whether the order of returning activities is from newest to oldest or the opposite.
           * If "false", then the oldest activity item that matches a selected filter is returned first.
           * If "true", then the newest activity is returned first. By default, "false".
           */
          /**
           * @description Start timestamp of the time interval the activity timestamp belongs to.
           * If the parameter is not set, it is considered to be 0.
           */
          /**
           * @description End timestamp of the time interval the activity timestamp belongs to.
           * If the parameter is not set, it is considered as Long.MAX_VALUE.
           */
          /**
           * @description Parameter to filter activities by the author. The database id or login, or Hub id,
           * or 'me' for the current logged in user could be specified.
           */
        query?: {
          categories?: string;
          reverse?: boolean;
          start?: string;
          end?: string;
          author?: string;
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of ActivityItem */
        200: {
          content: {
            "application/json": (components["schemas"]["ActivityItem"])[];
          };
        };
      };
    };
  };
  "/issues/{id}/activities/{activityItemId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          activityItemId: string;
        };
      };
      responses: {
        /** @description single ActivityItem */
        200: {
          content: {
            "application/json": components["schemas"]["ActivityItem"];
          };
        };
      };
    };
    parameters: {
      path: {
        id: string;
        activityItemId: string;
      };
    };
  };
  "/issues/{id}/activitiesPage": {
    get: {
      parameters: {
          /**
           * @description Indicates whether the order of returning activities is from newest to oldest or the opposite.
           * If "false", then the oldest activity item that matches a selected filter is returned first.
           * If "true", then the newest activity is returned first. By default, "false".
           */
          /**
           * @description Start timestamp of the time interval the activity timestamp belongs to.
           * If the parameter is not set, it is considered to be 0.
           */
          /**
           * @description End timestamp of the time interval the activity timestamp belongs to.
           * If the parameter is not set, it is considered as Long.MAX_VALUE.
           */
          /**
           * @description Parameter to filter activities by the author. The database id or login, or Hub id,
           * or 'me' for the current logged in user could be specified.
           */
          /** @description ID of the activity that should be included in the page. The activity is allocated to the middle of the page. */
        query?: {
          categories?: string;
          reverse?: boolean;
          start?: string;
          end?: string;
          author?: string;
          cursor?: string;
          activityId?: string;
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single ActivityCursorPage */
        200: {
          content: {
            "application/json": components["schemas"]["ActivityCursorPage"];
          };
        };
      };
    };
  };
  "/issues/{id}/attachments": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of IssueAttachment */
        200: {
          content: {
            "application/json": (components["schemas"]["IssueAttachment"])[];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            /** Format: binary */
            "files[0]"?: string;
          };
        };
      };
      responses: {
        /** @description collection of IssueAttachment */
        200: {
          content: {
            "application/json": (components["schemas"]["IssueAttachment"])[];
          };
        };
      };
    };
  };
  "/issues/{id}/attachments/{issueAttachmentId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          issueAttachmentId: string;
        };
      };
      responses: {
        /** @description single IssueAttachment */
        200: {
          content: {
            "application/json": components["schemas"]["IssueAttachment"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          issueAttachmentId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["IssueAttachment"];
        };
      };
      responses: {
        /** @description single IssueAttachment */
        200: {
          content: {
            "application/json": components["schemas"]["IssueAttachment"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          issueAttachmentId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        issueAttachmentId: string;
      };
    };
  };
  "/issues/{id}/comments": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of IssueComment */
        200: {
          content: {
            "application/json": (components["schemas"]["IssueComment"])[];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description ID of an existing draft that should be published. This parameter is optional. */
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          draftId?: string;
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["IssueComment"];
        };
      };
      responses: {
        /** @description single IssueComment */
        200: {
          content: {
            "application/json": components["schemas"]["IssueComment"];
          };
        };
      };
    };
  };
  "/issues/{id}/comments/{issueCommentId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          issueCommentId: string;
        };
      };
      responses: {
        /** @description single IssueComment */
        200: {
          content: {
            "application/json": components["schemas"]["IssueComment"];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
          issueCommentId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["IssueComment"];
        };
      };
      responses: {
        /** @description single IssueComment */
        200: {
          content: {
            "application/json": components["schemas"]["IssueComment"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          issueCommentId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        issueCommentId: string;
      };
    };
  };
  "/issues/{id}/customFields": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of IssueCustomField */
        200: {
          content: {
            "application/json": (components["schemas"]["IssueCustomField"])[];
          };
        };
      };
    };
  };
  "/issues/{id}/customFields/{issueCustomFieldId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          issueCustomFieldId: string;
        };
      };
      responses: {
        /** @description single IssueCustomField */
        200: {
          content: {
            "application/json": components["schemas"]["IssueCustomField"];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
          issueCustomFieldId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["IssueCustomField"];
        };
      };
      responses: {
        /** @description single IssueCustomField */
        200: {
          content: {
            "application/json": components["schemas"]["IssueCustomField"];
          };
        };
      };
    };
    parameters: {
      path: {
        id: string;
        issueCustomFieldId: string;
      };
    };
  };
  "/issues/{id}/links": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of IssueLink */
        200: {
          content: {
            "application/json": (components["schemas"]["IssueLink"])[];
          };
        };
      };
    };
  };
  "/issues/{id}/links/{issueLinkId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          issueLinkId: string;
        };
      };
      responses: {
        /** @description single IssueLink */
        200: {
          content: {
            "application/json": components["schemas"]["IssueLink"];
          };
        };
      };
    };
    parameters: {
      path: {
        id: string;
        issueLinkId: string;
      };
    };
  };
  "/issues/{id}/links/{issueLinkId}/issues": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
          issueLinkId: string;
        };
      };
      responses: {
        /** @description collection of Issue */
        200: {
          content: {
            "application/json": (components["schemas"]["Issue"])[];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
          issueLinkId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Issue"];
        };
      };
      responses: {
        /** @description single Issue */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
      };
    };
  };
  "/issues/{id}/links/{issueLinkId}/issues/{issueId}": {
    delete: {
      parameters: {
        path: {
          id: string;
          issueLinkId: string;
          issueId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        issueLinkId: string;
        issueId: string;
      };
    };
  };
  "/issues/{id}/project": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single Project */
        200: {
          content: {
            "application/json": components["schemas"]["Project"];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      responses: {
        /** @description single Project */
        200: {
          content: {
            "application/json": components["schemas"]["Project"];
          };
        };
      };
    };
  };
  "/issues/{id}/sprints": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of Sprint */
        200: {
          content: {
            "application/json": (components["schemas"]["Sprint"])[];
          };
        };
      };
    };
  };
  "/issues/{id}/sprints/{sprintId}": {
    parameters: {
      path: {
        id: string;
        sprintId: string;
      };
    };
  };
  "/issues/{id}/tags": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of IssueTag */
        200: {
          content: {
            "application/json": (components["schemas"]["IssueTag"])[];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["IssueTag"];
        };
      };
      responses: {
        /** @description single IssueTag */
        200: {
          content: {
            "application/json": components["schemas"]["IssueTag"];
          };
        };
      };
    };
  };
  "/issues/{id}/tags/{issueTagId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          issueTagId: string;
        };
      };
      responses: {
        /** @description single IssueTag */
        200: {
          content: {
            "application/json": components["schemas"]["IssueTag"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          issueTagId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        issueTagId: string;
      };
    };
  };
  "/issues/{id}/timeTracking": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single IssueTimeTracker */
        200: {
          content: {
            "application/json": components["schemas"]["IssueTimeTracker"];
          };
        };
      };
    };
  };
  "/issues/{id}/timeTracking/workItems": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of IssueWorkItem */
        200: {
          content: {
            "application/json": (components["schemas"]["IssueWorkItem"])[];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["IssueWorkItem"];
        };
      };
      responses: {
        /** @description single IssueWorkItem */
        200: {
          content: {
            "application/json": components["schemas"]["IssueWorkItem"];
          };
        };
      };
    };
  };
  "/issues/{id}/timeTracking/workItems/{issueWorkItemId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          issueWorkItemId: string;
        };
      };
      responses: {
        /** @description single IssueWorkItem */
        200: {
          content: {
            "application/json": components["schemas"]["IssueWorkItem"];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
          issueWorkItemId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["IssueWorkItem"];
        };
      };
      responses: {
        /** @description single IssueWorkItem */
        200: {
          content: {
            "application/json": components["schemas"]["IssueWorkItem"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          issueWorkItemId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        issueWorkItemId: string;
      };
    };
  };
  "/issues/{id}/vcsChanges": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of VcsChange */
        200: {
          content: {
            "application/json": (components["schemas"]["VcsChange"])[];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on issue changes caused by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["VcsChange"];
        };
      };
      responses: {
        /** @description single VcsChange */
        200: {
          content: {
            "application/json": components["schemas"]["VcsChange"];
          };
        };
      };
    };
  };
  "/issues/{id}/vcsChanges/{vcsChangeId}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
          vcsChangeId: string;
        };
      };
      responses: {
        /** @description single VcsChange */
        200: {
          content: {
            "application/json": components["schemas"]["VcsChange"];
          };
        };
      };
    };
    post: {
      parameters: {
          /** @description Set this parameter to `true` if no notifications should be sent on changes made by this request. This doesn't mute notifications sent by any workflow rules. Using this parameter requires <control>Apply Commands Silently</control> permission in all projects affected by the request. Available since 2021.3. */
        query?: {
          muteUpdateNotifications?: boolean;
          fields?: string;
        };
        path: {
          id: string;
          vcsChangeId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["VcsChange"];
        };
      };
      responses: {
        /** @description single VcsChange */
        200: {
          content: {
            "application/json": components["schemas"]["VcsChange"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
          vcsChangeId: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
        vcsChangeId: string;
      };
    };
  };
  "/issuesGetter/count": {
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["IssueCountResponse"];
        };
      };
      responses: {
        /** @description single IssueCountResponse */
        200: {
          content: {
            "application/json": components["schemas"]["IssueCountResponse"];
          };
        };
      };
    };
  };
  "/savedQueries": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of SavedQuery */
        200: {
          content: {
            "application/json": (components["schemas"]["SavedQuery"])[];
          };
        };
      };
    };
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SavedQuery"];
        };
      };
      responses: {
        /** @description single SavedQuery */
        200: {
          content: {
            "application/json": components["schemas"]["SavedQuery"];
          };
        };
      };
    };
  };
  "/savedQueries/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single SavedQuery */
        200: {
          content: {
            "application/json": components["schemas"]["SavedQuery"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SavedQuery"];
        };
      };
      responses: {
        /** @description single SavedQuery */
        200: {
          content: {
            "application/json": components["schemas"]["SavedQuery"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: never;
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/search/assist": {
    post: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SearchSuggestions"];
        };
      };
      responses: {
        /** @description single SearchSuggestions */
        200: {
          content: {
            "application/json": components["schemas"]["SearchSuggestions"];
          };
        };
      };
    };
  };
  "/users": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of User */
        200: {
          content: {
            "application/json": (components["schemas"]["User"])[];
          };
        };
      };
    };
  };
  "/users/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single User */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/users/{id}/profiles/general": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single GeneralUserProfile */
        200: {
          content: {
            "application/json": components["schemas"]["GeneralUserProfile"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["GeneralUserProfile"];
        };
      };
      responses: {
        /** @description single GeneralUserProfile */
        200: {
          content: {
            "application/json": components["schemas"]["GeneralUserProfile"];
          };
        };
      };
    };
  };
  "/users/{id}/profiles/notifications": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single NotificationsUserProfile */
        200: {
          content: {
            "application/json": components["schemas"]["NotificationsUserProfile"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["NotificationsUserProfile"];
        };
      };
      responses: {
        /** @description single NotificationsUserProfile */
        200: {
          content: {
            "application/json": components["schemas"]["NotificationsUserProfile"];
          };
        };
      };
    };
  };
  "/users/{id}/profiles/timetracking": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single TimeTrackingUserProfile */
        200: {
          content: {
            "application/json": components["schemas"]["TimeTrackingUserProfile"];
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["TimeTrackingUserProfile"];
        };
      };
      responses: {
        /** @description single TimeTrackingUserProfile */
        200: {
          content: {
            "application/json": components["schemas"]["TimeTrackingUserProfile"];
          };
        };
      };
    };
  };
  "/users/{id}/savedQueries": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of SavedQuery */
        200: {
          content: {
            "application/json": (components["schemas"]["SavedQuery"])[];
          };
        };
      };
    };
  };
  "/users/{id}/savedQueries/{savedQueryId}": {
    parameters: {
      path: {
        id: string;
        savedQueryId: string;
      };
    };
  };
  "/users/{id}/tags": {
    get: {
      parameters: {
        query?: {
          fields?: string;
          $skip?: number;
          $top?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description collection of IssueTag */
        200: {
          content: {
            "application/json": (components["schemas"]["IssueTag"])[];
          };
        };
      };
    };
  };
  "/users/{id}/tags/{issueTagId}": {
    parameters: {
      path: {
        id: string;
        issueTagId: string;
      };
    };
  };
  "/users/me": {
    get: {
      parameters?: {
        query?: {
          fields?: string;
        };
      };
      responses: {
        /** @description single Me */
        200: {
          content: {
            "application/json": components["schemas"]["Me"];
          };
        };
      };
    };
  };
  "/workItems": {
    get: {
      parameters?: {
          /** @description Issues search query. Read more about search syntax here: <a href="https://www.jetbrains.com/help/youtrack/cloud/?Search-and-Command-Attributes">Search Query Reference</a> */
          /** @description The start date of the interval for work items date. */
          /** @description The end date of the interval for work items date. */
          /** @description The start timestamp of the interval for work items date. */
          /** @description The end timestamp of the interval for work items date. */
          /** @description The start timestamp of the interval for work items created date. */
          /** @description The end timestamp of the interval for work items created date. */
          /** @description The start timestamp of the interval for work items updated date. */
          /** @description The end timestamp of the interval for work items updated date. */
        query?: {
          query?: string;
          startDate?: string;
          endDate?: string;
          start?: number;
          end?: number;
          createdStart?: number;
          createdEnd?: number;
          updatedStart?: number;
          updatedEnd?: number;
          author?: string;
          creator?: string;
          fields?: string;
          $skip?: number;
          $top?: number;
        };
      };
      responses: {
        /** @description collection of IssueWorkItem */
        200: {
          content: {
            "application/json": (components["schemas"]["IssueWorkItem"])[];
          };
        };
      };
    };
  };
  "/workItems/{id}": {
    get: {
      parameters: {
        query?: {
          fields?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description single IssueWorkItem */
        200: {
          content: {
            "application/json": components["schemas"]["IssueWorkItem"];
          };
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ActivityCategory: {
      id?: string;
      $type?: string;
    };
    /**
     * @description Represents a page object that wraps a list of issue activities.
     * The main advantage of the page in comparison to a list of activities is cursors.
     * The page provides boundary marks that allow continuous iteration over the activities from the place
     * the page is finished.
     */
    ActivityCursorPage: {
      id?: string;
      reverse?: boolean;
      beforeCursor?: string;
      afterCursor?: string;
      hasBefore?: boolean;
      hasAfter?: boolean;
      activities?: readonly (components["schemas"]["ActivityItem"])[];
      $type?: string;
    };
    /**
     * @description Represents a change in an issue or in its related entities. In the UI, you see these changes as
     * the Activity stream. It shows a feed of all updates of the issue: issue history, comments, attachments,
     * VCS changes, work items, and so on.
     */
    ActivityItem: {
      id?: string;
      author?: components["schemas"]["User"];
      /** Format: int64 */
      timestamp?: number;
      removed?: Record<string, never>;
      added?: Record<string, never>;
      target?: Record<string, never>;
      targetMember?: string;
      field?: components["schemas"]["FilterField"];
      category?: components["schemas"]["ActivityCategory"];
      $type?: string;
    };
    /** @description Represents an agile board configuration. */
    Agile: {
      id?: string;
      name?: string;
      owner?: components["schemas"]["User"];
      visibleFor?: components["schemas"]["UserGroup"];
      visibleForProjectBased?: boolean;
      updateableBy?: components["schemas"]["UserGroup"];
      updateableByProjectBased?: boolean;
      readSharingSettings?: components["schemas"]["AgileSharingSettings"];
      updateSharingSettings?: components["schemas"]["AgileSharingSettings"];
      orphansAtTheTop?: boolean;
      hideOrphansSwimlane?: boolean;
      estimationField?: components["schemas"]["CustomField"];
      originalEstimationField?: components["schemas"]["CustomField"];
      projects?: (components["schemas"]["Project"])[];
      sprints?: (components["schemas"]["Sprint"])[];
      currentSprint?: components["schemas"]["Sprint"];
      columnSettings?: components["schemas"]["ColumnSettings"];
      swimlaneSettings?: components["schemas"]["SwimlaneSettings"];
      sprintsSettings?: components["schemas"]["SprintsSettings"];
      colorCoding?: components["schemas"]["ColorCoding"];
      status?: components["schemas"]["AgileStatus"];
      $type?: string;
    };
    /** @description Represents settings for a single board column */
    AgileColumn: {
      id?: string;
      presentation?: string;
      isResolved?: boolean;
      /** Format: int32 */
      ordinal?: number;
      parent?: components["schemas"]["ColumnSettings"];
      wipLimit?: components["schemas"]["WIPLimit"];
      fieldValues?: (components["schemas"]["AgileColumnFieldValue"])[];
      $type?: string;
    };
    /** @description Represents a field value or values, parameterizing agile column. */
    AgileColumnFieldValue: {
      $type: "AgileColumnFieldValue";
    } & Omit<components["schemas"]["DatabaseAttributeValue"], "$type"> & {
      id?: string;
      name?: string;
      isResolved?: boolean;
    };
    /** @description Stores users and groups that have access to an agile board. */
    AgileSharingSettings: {
      id?: string;
      permittedGroups?: (components["schemas"]["UserGroup"])[];
      permittedUsers?: (components["schemas"]["User"])[];
      $type?: string;
    };
    /** @description Shows if the board has any configuration problems. */
    AgileStatus: {
      id?: string;
      valid?: boolean;
      hasJobs?: boolean;
      errors?: readonly (string)[];
      warnings?: readonly (string)[];
      $type?: string;
    };
    /** @description Represents the Visual settings of the YouTrack service. */
    AppearanceSettings: {
      id?: string;
      timeZone?: components["schemas"]["TimeZoneDescriptor"];
      dateFieldFormat?: components["schemas"]["DateFormatDescriptor"];
      logo?: components["schemas"]["Logo"];
      $type?: string;
    };
    /** @description Represents an article. */
    Article: {
      $type: "Article";
    } & Omit<components["schemas"]["BaseArticle"], "$type"> & {
      id?: string;
      reporter?: components["schemas"]["User"];
      visibility?: components["schemas"]["Visibility"];
      summary?: string;
      content?: string;
      attachments?: (components["schemas"]["ArticleAttachment"])[];
      project?: components["schemas"]["Project"];
      parentArticle?: components["schemas"]["Article"];
      childArticles?: (components["schemas"]["Article"])[];
      hasChildren?: boolean;
      updatedBy?: components["schemas"]["User"];
      /** Format: int64 */
      updated?: number;
      /** Format: int64 */
      created?: number;
      idReadable?: string;
      /** Format: int64 */
      ordinal?: number;
      comments?: (components["schemas"]["ArticleComment"])[];
      hasStar?: boolean;
      externalArticle?: components["schemas"]["ExternalArticle"];
    };
    /** @description Represents a file that is attached to an article or a comment to an article. */
    ArticleAttachment: {
      id?: string;
      name?: string;
      author?: components["schemas"]["User"];
      /** Format: int64 */
      created?: number;
      /** Format: int64 */
      updated?: number;
      /** Format: int64 */
      size?: number;
      extension?: string;
      charset?: string;
      mimeType?: string;
      metaData?: string;
      draft?: boolean;
      removed?: boolean;
      base64Content?: string;
      url?: string;
      visibility?: components["schemas"]["Visibility"];
      article?: components["schemas"]["BaseArticle"];
      comment?: components["schemas"]["ArticleComment"];
      $type?: string;
    };
    /** @description Represents a comment to an article. */
    ArticleComment: {
      id?: string;
      text?: string;
      /** Format: int64 */
      created?: number;
      /** Format: int64 */
      updated?: number;
      author?: components["schemas"]["User"];
      article?: components["schemas"]["Article"];
      attachments?: (components["schemas"]["ArticleAttachment"])[];
      visibility?: components["schemas"]["Visibility"];
      $type?: string;
    };
    /** @description Represents a change in the list of attachments of an issue. */
    AttachmentActivityItem: components["schemas"]["CreatedDeletedActivityItem"] & {
      id?: string;
      target?: components["schemas"]["IssueAttachment"];
      removed?: readonly (components["schemas"]["IssueAttachment"])[];
      added?: readonly (components["schemas"]["IssueAttachment"])[];
    };
    AttributeBasedSwimlaneSettings: {
      $type: "AttributeBasedSwimlaneSettings";
    } & Omit<components["schemas"]["SwimlaneSettings"], "$type"> & {
      id?: string;
      field?: components["schemas"]["FilterField"];
      values?: (components["schemas"]["SwimlaneEntityAttributeValue"])[];
    };
    /** @description Represents an error that appeared during the backup. */
    BackupError: {
      id?: string;
      /** Format: int64 */
      date?: number;
      errorMessage?: string;
      $type?: string;
    };
    /** @description Represents the backup file. */
    BackupFile: {
      id?: string;
      name?: string;
      /** Format: int64 */
      size?: number;
      /** Format: int64 */
      creationDate?: number;
      link?: string;
      $type?: string;
    };
    /** @description Represents the current status of the backup process. */
    BackupStatus: {
      id?: string;
      backupInProgress?: boolean;
      backupCancelled?: boolean;
      backupError?: components["schemas"]["BackupError"];
      $type?: string;
    };
    /** @description Represents a base article entity. */
    BaseArticle: {
      id?: string;
      reporter?: components["schemas"]["User"];
      visibility?: components["schemas"]["Visibility"];
      summary?: string;
      content?: string;
      attachments?: (components["schemas"]["ArticleAttachment"])[];
      $type?: string;
    };
    /** @description Represents a set of field values in YouTrack. */
    BaseBundle: {
      $type: "BaseBundle";
    } & Omit<components["schemas"]["Bundle"], "$type"> & {
      id?: string;
      values?: (components["schemas"]["BundleElement"])[];
    };
    /** @description Represents a basic ancestor for work items. */
    BaseWorkItem: {
      id?: string;
      $type?: string;
    };
    /** @description Represents an integration with a VCS repository hosted on bitbucket.org. */
    BitBucketChangesProcessor: components["schemas"]["VcsHostingChangesProcessor"] & {
      id?: string;
      server?: components["schemas"]["BitBucketServer"];
    };
    /** @description Represents a cloud Bitbucket server. */
    BitBucketServer: components["schemas"]["VcsHostingServer"] & {
      id?: string;
      url?: string;
    };
    /** @description Represents an integration with a VCS repository on a self-hosted Bitbucket server. */
    BitbucketStandaloneChangesProcessor: components["schemas"]["VcsHostingChangesProcessor"] & {
      id?: string;
      server?: components["schemas"]["BitbucketStandaloneServer"];
    };
    /** @description Represents a self-hosted Bitbucket server. */
    BitbucketStandaloneServer: components["schemas"]["VcsHostingServer"] & {
      id?: string;
      url?: string;
    };
    /** @description Represents a set of builds in YouTrack. */
    BuildBundle: components["schemas"]["BaseBundle"] & {
      id?: string;
      values?: (components["schemas"]["BuildBundleElement"])[];
    };
    /** @description Default settings for the build-type field. */
    BuildBundleCustomFieldDefaults: components["schemas"]["BundleCustomFieldDefaults"] & {
      id?: string;
      bundle?: components["schemas"]["BuildBundle"];
      defaultValues?: (components["schemas"]["BuildBundleElement"])[];
    };
    /** @description Represents a build - a single element of a builds bundle. */
    BuildBundleElement: {
      $type: "BuildBundleElement";
    } & Omit<components["schemas"]["BundleElement"], "$type"> & {
      id?: string;
      /** Format: int64 */
      assembleDate?: number;
    };
    /** @description Represents project settings for a build field. */
    BuildProjectCustomField: components["schemas"]["BundleProjectCustomField"] & {
      id?: string;
      bundle?: components["schemas"]["BuildBundle"];
      defaultValues?: (components["schemas"]["BuildBundleElement"])[];
    };
    /** @description Represents a set of custom field values in YouTrack. */
    Bundle: {
      id?: string;
      isUpdateable?: boolean;
      $type?: string;
    };
    /** @description Represents custom field default settings for enumerated fields. */
    BundleCustomFieldDefaults: {
      $type: "BundleCustomFieldDefaults";
    } & Omit<components["schemas"]["CustomFieldDefaults"], "$type"> & {
      id?: string;
    };
    /** @description Represents a field value in YouTrack. */
    BundleElement: {
      id?: string;
      name?: string;
      bundle?: components["schemas"]["Bundle"];
      description?: string;
      archived?: boolean;
      /** Format: int32 */
      ordinal?: number;
      color?: components["schemas"]["FieldStyle"];
      hasRunningJob?: boolean;
      $type?: string;
    };
    /** @description Represents project settings for a custom field with a defined set of values. */
    BundleProjectCustomField: {
      $type: "BundleProjectCustomField";
    } & Omit<components["schemas"]["ProjectCustomField"], "$type">;
    /** @description The basic entity that represents a VCS or a build server integration configured for a project. */
    ChangesProcessor: {
      id?: string;
      server?: components["schemas"]["VcsServer"];
      project?: components["schemas"]["Project"];
      relatedProjects?: (components["schemas"]["Project"])[];
      enabled?: boolean;
      visibleForGroups?: (components["schemas"]["UserGroup"])[];
      addComments?: boolean;
      lookupIssuesInBranchName?: boolean;
      $type?: string;
    };
    /** @description Describes rules that define which colors are used for cards on the agile board. */
    ColorCoding: {
      id?: string;
      $type?: string;
    };
    /** @description Agile board columns settings. */
    ColumnSettings: {
      id?: string;
      field?: components["schemas"]["CustomField"];
      columns?: (components["schemas"]["AgileColumn"])[];
      $type?: string;
    };
    /** @description Stores the restricted visibility settings for the command. */
    CommandLimitedVisibility: {
      $type: "CommandLimitedVisibility";
    } & Omit<components["schemas"]["CommandVisibility"], "$type"> & {
      id?: string;
      permittedGroups?: readonly (components["schemas"]["UserGroup"])[];
      permittedUsers?: readonly (components["schemas"]["User"])[];
    };
    /**
     * @description Represents list of command and related comment in YouTrack.
     * Can be used to either apply a command or get command suggestions.
     */
    CommandList: {
      id?: string;
      comment?: string;
      visibility?: components["schemas"]["CommandVisibility"];
      query?: string;
      /** Format: int32 */
      caret?: number;
      silent?: boolean;
      runAs?: string;
      commands?: readonly (components["schemas"]["ParsedCommand"])[];
      issues?: (components["schemas"]["Issue"])[];
      suggestions?: readonly (components["schemas"]["Suggestion"])[];
      $type?: string;
    };
    /** @description Comment is visible for all the users who can read the issue. */
    CommandUnlimitedVisibility: {
      $type: "CommandUnlimitedVisibility";
    } & Omit<components["schemas"]["CommandVisibility"], "$type">;
    /** @description Visibility settings of the comment that is added along with the command. */
    CommandVisibility: {
      id?: string;
      $type?: string;
    };
    /** @description Represents a change in the comments of an issue. */
    CommentActivityItem: components["schemas"]["CreatedDeletedActivityItem"] & {
      id?: string;
      target?: components["schemas"]["IssueComment"];
      removed?: readonly (components["schemas"]["IssueComment"])[];
      added?: readonly (components["schemas"]["IssueComment"])[];
      authorGroup?: components["schemas"]["UserGroup"];
    };
    /** @description Represents a change in the `attachments` attribute of an IssueComment. */
    CommentAttachmentsActivityItem: components["schemas"]["MultiValueActivityItem"] & {
      id?: string;
      target?: components["schemas"]["IssueComment"];
      removed?: readonly (components["schemas"]["IssueAttachment"])[];
      added?: readonly (components["schemas"]["IssueAttachment"])[];
    };
    /** @description Represents an action when an entity is created or deleted in an issue. For example, a new comment is created in the issue. */
    CreatedDeletedActivityItem: {
      $type: "CreatedDeletedActivityItem";
    } & Omit<components["schemas"]["ActivityItem"], "$type"> & {
      id?: string;
    };
    /** @description Represents a custom field in YouTrack. */
    CustomField: {
      id?: string;
      name?: string;
      localizedName?: string;
      fieldType?: components["schemas"]["FieldType"];
      isAutoAttached?: boolean;
      isDisplayedInIssueList?: boolean;
      /** Format: int32 */
      ordinal?: number;
      aliases?: string;
      fieldDefaults?: components["schemas"]["CustomFieldDefaults"];
      hasRunningJob?: boolean;
      isUpdateable?: boolean;
      instances?: (components["schemas"]["ProjectCustomField"])[];
      $type?: string;
    };
    /** @description Represents an activity that affects a custom field of an issue. */
    CustomFieldActivityItem: {
      $type: "CustomFieldActivityItem";
    } & Omit<components["schemas"]["ActivityItem"], "$type"> & {
      id?: string;
      target?: components["schemas"]["Issue"];
      removed?: Record<string, never>;
      added?: Record<string, never>;
    };
    /** @description Represents the condition for showing a custom field. */
    CustomFieldCondition: {
      id?: string;
      parent?: components["schemas"]["ProjectCustomField"];
      $type?: string;
    };
    /** @description Represents default project-related settings of the custom field. These settings are applied at the moment when the custom field is attached to a project. After that, any changes in default settings do not affect the field settings for this project. */
    CustomFieldDefaults: {
      id?: string;
      canBeEmpty?: boolean;
      emptyFieldText?: string;
      isPublic?: boolean;
      parent?: components["schemas"]["CustomField"];
      $type?: string;
    };
    /** @description Represents a custom field of the issue. */
    CustomFilterField: {
      $type: "CustomFilterField";
    } & Omit<components["schemas"]["FilterField"], "$type"> & {
      id?: string;
      customField?: components["schemas"]["CustomField"];
    };
    /** @description Represents string reference to the value. */
    DatabaseAttributeValue: {
      id?: string;
      $type?: string;
    };
    /** @description Represents database backup settings of the YouTrack instance. */
    DatabaseBackupSettings: {
      id?: string;
      location?: string;
      /** Format: int32 */
      filesToKeep?: number;
      cronExpression?: string;
      /** @enum {string} */
      archiveFormat?: "TAR_GZ" | "ZIP";
      isOn?: boolean;
      /** Format: int64 */
      availableDiskSpace?: number;
      notifiedUsers?: (components["schemas"]["User"])[];
      backupStatus?: components["schemas"]["BackupStatus"];
      $type?: string;
    };
    /** @description Represents date format. */
    DateFormatDescriptor: {
      id?: string;
      presentation?: string;
      pattern?: string;
      datePattern?: string;
      $type?: string;
    };
    /** @description Represents a date-type custom field in the issue. */
    DateIssueCustomField: components["schemas"]["SimpleIssueCustomField"] & {
      id?: string;
      value?: Record<string, never>;
    };
    /** @description Represents a vote for duplicates of the issue. */
    DuplicateVote: {
      id?: string;
      issue?: components["schemas"]["Issue"];
      user?: components["schemas"]["User"];
      $type?: string;
    };
    /** @description Represents the duration value and its visual presentation. */
    DurationValue: {
      id?: string;
      /** Format: int32 */
      minutes?: number;
      presentation?: string;
      $type?: string;
    };
    /** @description Represents email settings for this YouTrack installation. */
    EmailSettings: {
      id?: string;
      isEnabled?: boolean;
      host?: string;
      /** Format: int32 */
      port?: number;
      /** @enum {string} */
      mailProtocol?: "SMTP" | "SMTPS" | "SMTP_TLS";
      anonymous?: boolean;
      login?: string;
      sslKey?: components["schemas"]["StorageEntry"];
      from?: string;
      replyTo?: string;
      $type?: string;
    };
    /** @description Represents an enumerated set of values in YouTrack. */
    EnumBundle: components["schemas"]["BaseBundle"] & {
      id?: string;
      values?: (components["schemas"]["EnumBundleElement"])[];
    };
    /** @description Default settings for the enum-type field. */
    EnumBundleCustomFieldDefaults: components["schemas"]["BundleCustomFieldDefaults"] & {
      id?: string;
      bundle?: components["schemas"]["EnumBundle"];
      defaultValues?: (components["schemas"]["EnumBundleElement"])[];
    };
    /** @description Represents an enumeration value in YouTrack. */
    EnumBundleElement: components["schemas"]["LocalizableBundleElement"] & {
      id?: string;
    };
    /** @description Represents project settings for the enum field. */
    EnumProjectCustomField: components["schemas"]["BundleProjectCustomField"] & {
      id?: string;
      bundle?: components["schemas"]["EnumBundle"];
      defaultValues?: (components["schemas"]["EnumBundleElement"])[];
    };
    /** @description Represents a transition from one value to another for a custom field that is managed by a state-machine rule in workflow. */
    Event: {
      id?: string;
      presentation?: string;
      $type?: string;
    };
    /** @description For an article that was imported from another service, this entity represents the reference to the article in the external system. */
    ExternalArticle: {
      id?: string;
      name?: string;
      url?: string;
      key?: string;
      $type?: string;
    };
    /** @description For an issue that was imported from another service, represents the reference to the issue in the external system. */
    ExternalIssue: {
      id?: string;
      name?: string;
      url?: string;
      key?: string;
      $type?: string;
    };
    /** @description Sets a card color based on a value of some custom field. */
    FieldBasedColorCoding: {
      $type: "FieldBasedColorCoding";
    } & Omit<components["schemas"]["ColorCoding"], "$type"> & {
      id?: string;
      prototype?: components["schemas"]["CustomField"];
    };
    /** @description Represents the condition for showing a custom field. */
    FieldBasedCondition: {
      $type: "FieldBasedCondition";
    } & Omit<components["schemas"]["CustomFieldCondition"], "$type"> & {
      id?: string;
      field?: components["schemas"]["BundleProjectCustomField"];
      values?: (components["schemas"]["BundleElement"])[];
      showForNullValue?: boolean;
    };
    /** @description Represents the style settings of the field in YouTrack. */
    FieldStyle: {
      id?: string;
      background?: string;
      foreground?: string;
      $type?: string;
    };
    /** @description Represents the type of a custom field in YouTrack. */
    FieldType: {
      id?: string;
      $type?: string;
    };
    /** @description Represents an issue property, which can be a predefined field, a custom field, a link, and so on. */
    FilterField: {
      id?: string;
      presentation?: string;
      name?: string;
      $type?: string;
    };
    /** @description Represents the user profile in YouTrack. */
    GeneralUserProfile: {
      id?: string;
      dateFieldFormat?: components["schemas"]["DateFormatDescriptor"];
      timezone?: components["schemas"]["TimeZoneDescriptor"];
      locale?: components["schemas"]["LocaleDescriptor"];
      $type?: string;
    };
    /** @description Represents a GitHub integration configured for a project. */
    GitHubChangesProcessor: components["schemas"]["VcsHostingChangesProcessor"] & {
      id?: string;
      server?: components["schemas"]["GitHubServer"];
    };
    /** @description Represents a GitHub server. */
    GitHubServer: components["schemas"]["VcsHostingServer"] & {
      id?: string;
      url?: string;
    };
    /** @description Represents a GitLab integration configured for a project. */
    GitLabChangesProcessor: components["schemas"]["VcsHostingChangesProcessor"] & {
      id?: string;
      server?: components["schemas"]["GitLabServer"];
    };
    /** @description Represents a GitLab server. */
    GitLabServer: components["schemas"]["VcsHostingServer"] & {
      id?: string;
      url?: string;
    };
    /** @description Represents a Gitea integration configured for a project. */
    GiteaChangesProcessor: components["schemas"]["VcsHostingChangesProcessor"] & {
      id?: string;
      server?: components["schemas"]["GiteaServer"];
    };
    /** @description Represents a Gitea server. */
    GiteaServer: components["schemas"]["VcsHostingServer"] & {
      id?: string;
      url?: string;
    };
    /** @description Represents application-wide settings. */
    GlobalSettings: {
      id?: string;
      systemSettings?: components["schemas"]["SystemSettings"];
      notificationSettings?: components["schemas"]["NotificationSettings"];
      restSettings?: components["schemas"]["RestCorsSettings"];
      appearanceSettings?: components["schemas"]["AppearanceSettings"];
      localeSettings?: components["schemas"]["LocaleSettings"];
      license?: components["schemas"]["License"];
      $type?: string;
    };
    /** @description Represents time tracking settings of your server. */
    GlobalTimeTrackingSettings: {
      id?: string;
      workItemTypes?: readonly (components["schemas"]["WorkItemType"])[];
      workTimeSettings?: components["schemas"]["WorkTimeSettings"];
      attributePrototypes?: readonly (components["schemas"]["WorkItemAttributePrototype"])[];
      $type?: string;
    };
    /** @description Represents a Gogs integration configured for a project. */
    GogsChangesProcessor: components["schemas"]["VcsHostingChangesProcessor"] & {
      id?: string;
      server?: components["schemas"]["GogsServer"];
    };
    /** @description Represents a Gogs server. */
    GogsServer: components["schemas"]["VcsHostingServer"] & {
      id?: string;
      url?: string;
    };
    /** @description Represents project settings for a group custom field. */
    GroupProjectCustomField: {
      $type: "GroupProjectCustomField";
    } & Omit<components["schemas"]["ProjectCustomField"], "$type"> & {
      id?: string;
      defaultValues?: (components["schemas"]["UserGroup"])[];
    };
    /** @description Represents an issue in YouTrack. */
    Issue: {
      id?: string;
      idReadable?: string;
      /** Format: int64 */
      created?: number;
      /** Format: int64 */
      updated?: number;
      /** Format: int64 */
      resolved?: number;
      /** Format: int64 */
      numberInProject?: number;
      project?: components["schemas"]["Project"];
      summary?: string;
      description?: string;
      wikifiedDescription?: string;
      reporter?: components["schemas"]["User"];
      updater?: components["schemas"]["User"];
      draftOwner?: components["schemas"]["User"];
      isDraft?: boolean;
      visibility?: components["schemas"]["Visibility"];
      /** Format: int32 */
      votes?: number;
      comments?: (components["schemas"]["IssueComment"])[];
      /** Format: int32 */
      commentsCount?: number;
      tags?: (components["schemas"]["IssueTag"])[];
      links?: readonly (components["schemas"]["IssueLink"])[];
      externalIssue?: components["schemas"]["ExternalIssue"];
      customFields?: readonly (components["schemas"]["IssueCustomField"])[];
      voters?: components["schemas"]["IssueVoters"];
      watchers?: components["schemas"]["IssueWatchers"];
      attachments?: (components["schemas"]["IssueAttachment"])[];
      subtasks?: components["schemas"]["IssueLink"];
      parent?: components["schemas"]["IssueLink"];
      $type?: string;
    };
    /** @description Represents a file that is attached to an issue or a comment. */
    IssueAttachment: {
      id?: string;
      name?: string;
      author?: components["schemas"]["User"];
      /** Format: int64 */
      created?: number;
      /** Format: int64 */
      updated?: number;
      /** Format: int64 */
      size?: number;
      extension?: string;
      charset?: string;
      mimeType?: string;
      metaData?: string;
      draft?: boolean;
      removed?: boolean;
      base64Content?: string;
      url?: string;
      visibility?: components["schemas"]["Visibility"];
      issue?: components["schemas"]["Issue"];
      comment?: components["schemas"]["IssueComment"];
      thumbnailURL?: string;
      $type?: string;
    };
    /** @description Swimlane settings for the case, when each swimlane is represented by an issue and contains this issue's subtasks. */
    IssueBasedSwimlaneSettings: {
      $type: "IssueBasedSwimlaneSettings";
    } & Omit<components["schemas"]["SwimlaneSettings"], "$type"> & {
      id?: string;
      field?: components["schemas"]["FilterField"];
      defaultCardType?: components["schemas"]["SwimlaneValue"];
      values?: (components["schemas"]["SwimlaneValue"])[];
    };
    /** @description Represents an existing issue comment. */
    IssueComment: {
      id?: string;
      text?: string;
      textPreview?: string;
      /** Format: int64 */
      created?: number;
      /** Format: int64 */
      updated?: number;
      author?: components["schemas"]["User"];
      issue?: components["schemas"]["Issue"];
      attachments?: (components["schemas"]["IssueAttachment"])[];
      visibility?: components["schemas"]["Visibility"];
      deleted?: boolean;
      $type?: string;
    };
    /** @description Represents the number of issues in a search result. */
    IssueCountResponse: {
      id?: string;
      /** Format: int64 */
      count?: number;
      unresolvedOnly?: boolean;
      query?: string;
      folder?: components["schemas"]["IssueFolder"];
      $type?: string;
    };
    /** @description Represents an event when a user creates a new issue. */
    IssueCreatedActivityItem: components["schemas"]["CreatedDeletedActivityItem"] & {
      id?: string;
      target?: components["schemas"]["Issue"];
      removed?: readonly (components["schemas"]["Issue"])[];
      added?: readonly (components["schemas"]["Issue"])[];
    };
    IssueCustomField: {
      id?: string;
      name?: string;
      projectCustomField?: components["schemas"]["ProjectCustomField"];
      value?: Record<string, never>;
      $type?: string;
    };
    /** @description Represents an issue folder, such as a project, a saved search, or a tag. */
    IssueFolder: {
      id?: string;
      name?: string;
      $type?: string;
    };
    /** @description Represents issue links of a particular link type (for example, 'relates to'). */
    IssueLink: {
      id?: string;
      /** @enum {string} */
      direction?: "OUTWARD" | "INWARD" | "BOTH";
      linkType?: components["schemas"]["IssueLinkType"];
      issues?: (components["schemas"]["Issue"])[];
      trimmedIssues?: readonly (components["schemas"]["Issue"])[];
      $type?: string;
    };
    /** @description Represents the settings of a link type in YouTrack. */
    IssueLinkType: {
      id?: string;
      name?: string;
      localizedName?: string;
      sourceToTarget?: string;
      localizedSourceToTarget?: string;
      targetToSource?: string;
      localizedTargetToSource?: string;
      directed?: boolean;
      aggregation?: boolean;
      readOnly?: boolean;
      $type?: string;
    };
    /** @description Represents an event when a user resolves an issue. */
    IssueResolvedActivityItem: components["schemas"]["SimpleValueActivityItem"] & {
      id?: string;
      /** Format: int64 */
      removed?: number;
      /** Format: int64 */
      added?: number;
    };
    /** @description Represents an issue tag. */
    IssueTag: components["schemas"]["WatchFolder"] & {
      id?: string;
      issues?: (components["schemas"]["Issue"])[];
      color?: components["schemas"]["FieldStyle"];
      untagOnResolve?: boolean;
      visibleFor?: components["schemas"]["UserGroup"];
      updateableBy?: components["schemas"]["UserGroup"];
      readSharingSettings?: components["schemas"]["WatchFolderSharingSettings"];
      tagSharingSettings?: components["schemas"]["TagSharingSettings"];
      updateSharingSettings?: components["schemas"]["WatchFolderSharingSettings"];
    };
    /** @description Represents time tracking settings in the issue. */
    IssueTimeTracker: {
      id?: string;
      workItems?: (components["schemas"]["IssueWorkItem"])[];
      enabled?: boolean;
      $type?: string;
    };
    /** @description Represents users that have voted for the issue or its duplicates. */
    IssueVoters: {
      id?: string;
      hasVote?: boolean;
      original?: readonly (components["schemas"]["User"])[];
      duplicate?: readonly (components["schemas"]["DuplicateVote"])[];
      $type?: string;
    };
    /** @description Represents a user who subscribed for notifications about an issue. */
    IssueWatcher: {
      id?: string;
      user?: components["schemas"]["User"];
      issue?: components["schemas"]["Issue"];
      isStarred?: boolean;
      $type?: string;
    };
    /** @description Represents users that are subscribed to notifications about the issue. */
    IssueWatchers: {
      id?: string;
      hasStar?: boolean;
      issueWatchers?: (components["schemas"]["IssueWatcher"])[];
      duplicateWatchers?: readonly (components["schemas"]["IssueWatcher"])[];
      $type?: string;
    };
    /** @description Represents a work item in an issue. */
    IssueWorkItem: {
      $type: "IssueWorkItem";
    } & Omit<components["schemas"]["BaseWorkItem"], "$type"> & {
      id?: string;
      author?: components["schemas"]["User"];
      creator?: components["schemas"]["User"];
      text?: string;
      textPreview?: string;
      type?: components["schemas"]["WorkItemType"];
      /** Format: int64 */
      created?: number;
      /** Format: int64 */
      updated?: number;
      duration?: components["schemas"]["DurationValue"];
      /** Format: int64 */
      date?: number;
      issue?: components["schemas"]["Issue"];
      attributes?: readonly (components["schemas"]["WorkItemAttribute"])[];
    };
    /** @description Represents jabber settings for this YouTrack installation. */
    JabberSettings: {
      id?: string;
      isEnabled?: boolean;
      host?: string;
      /** Format: int32 */
      port?: number;
      login?: string;
      serviceName?: string;
      $type?: string;
    };
    /** @description Represents a Jenkins integration configured for a project. */
    JenkinsChangesProcessor: {
      $type: "JenkinsChangesProcessor";
    } & Omit<components["schemas"]["ChangesProcessor"], "$type"> & {
      id?: string;
      server?: components["schemas"]["JenkinsServer"];
    };
    /** @description Represents a Jenkins server. */
    JenkinsServer: {
      $type: "JenkinsServer";
    } & Omit<components["schemas"]["VcsServer"], "$type"> & {
      id?: string;
      url?: string;
    };
    /** @description Represents the current license of the YouTrack service. */
    License: {
      id?: string;
      username?: string;
      license?: string;
      error?: string;
      $type?: string;
    };
    /** @description Represents visibility limited to several users and/or groups. */
    LimitedVisibility: {
      $type: "LimitedVisibility";
    } & Omit<components["schemas"]["Visibility"], "$type"> & {
      id?: string;
      permittedGroups?: (components["schemas"]["UserGroup"])[];
      permittedUsers?: (components["schemas"]["User"])[];
    };
    /**
     * @description Represents a change in the `issues` attribute of an IssueLink entity.
     * That is, each issue has the `links` attribute that contains an array of IssueLink entities.
     * Each of them represents a link between the target issue and a collection of issues.
     * For example, a set of issues to which the target one is linked as "Duplicated by".
     * The change in the list of these issues is represented by `LinksActivityItem` entity.
     */
    LinksActivityItem: components["schemas"]["MultiValueActivityItem"] & {
      id?: string;
      target?: components["schemas"]["Issue"];
      removed?: readonly (components["schemas"]["Issue"])[];
      added?: readonly (components["schemas"]["Issue"])[];
    };
    /** @description Represents a language locale that is used in UI. */
    LocaleDescriptor: {
      id?: string;
      locale?: string;
      language?: string;
      community?: boolean;
      name?: string;
      $type?: string;
    };
    /** @description Represents the System Language settings. */
    LocaleSettings: {
      id?: string;
      locale?: components["schemas"]["LocaleDescriptor"];
      isRTL?: boolean;
      $type?: string;
    };
    /** @description Represents field value that can be localized. */
    LocalizableBundleElement: {
      $type: "LocalizableBundleElement";
    } & Omit<components["schemas"]["BundleElement"], "$type"> & {
      id?: string;
      localizedName?: string;
    };
    /** @description Company logo that is used in YouTrack. */
    Logo: {
      id?: string;
      url?: string;
      $type?: string;
    };
    /** @description Represents the currently logged in user in YouTrack. */
    Me: {
      $type: "Me";
    } & Omit<components["schemas"]["User"], "$type"> & {
      id?: string;
    };
    /** @description Represents a multi-value build-type custom field in the issue. */
    MultiBuildIssueCustomField: components["schemas"]["DatabaseMultiValueIssueCustomField"] & {
      id?: string;
      value?: (components["schemas"]["BuildBundleElement"])[];
    };
    /** @description Represents a multi-value enum-type custom field in the issue. */
    MultiEnumIssueCustomField: components["schemas"]["DatabaseMultiValueIssueCustomField"] & {
      id?: string;
      value?: (components["schemas"]["EnumBundleElement"])[];
    };
    /** @description Represents a multi-value group-type custom field in the issue. */
    MultiGroupIssueCustomField: components["schemas"]["DatabaseMultiValueIssueCustomField"] & {
      id?: string;
      value?: (components["schemas"]["UserGroup"])[];
    };
    /** @description Represents a multi-value owned-type custom field in the issue. */
    MultiOwnedIssueCustomField: components["schemas"]["DatabaseMultiValueIssueCustomField"] & {
      id?: string;
      value?: (components["schemas"]["OwnedBundleElement"])[];
    };
    /** @description Represents a multi-value user-type custom field in the issue. */
    MultiUserIssueCustomField: components["schemas"]["DatabaseMultiValueIssueCustomField"] & {
      id?: string;
      value?: (components["schemas"]["User"])[];
    };
    /** @description Represents a change in an entity attribute that has type of `Array of &lt;Entities&gt;`. */
    MultiValueActivityItem: {
      $type: "MultiValueActivityItem";
    } & Omit<components["schemas"]["ActivityItem"], "$type"> & {
      id?: string;
      removed?: Record<string, never>;
      added?: Record<string, never>;
    };
    /** @description Represents a custom field that may have multiple values in the issue. */
    DatabaseMultiValueIssueCustomField: {
      $type: "DatabaseMultiValueIssueCustomField";
    } & Omit<components["schemas"]["IssueCustomField"], "$type"> & {
      id?: string;
      value?: Record<string, never>;
    };
    /** @description Represents a multi-value version-type custom field in the issue. */
    MultiVersionIssueCustomField: components["schemas"]["DatabaseMultiValueIssueCustomField"] & {
      id?: string;
      value?: (components["schemas"]["VersionBundleElement"])[];
    };
    /** @description Represents the Notifications settings of the YouTrack service. */
    NotificationSettings: {
      id?: string;
      emailSettings?: components["schemas"]["EmailSettings"];
      jabberSettings?: components["schemas"]["JabberSettings"];
      $type?: string;
    };
    /** @description Represents the notification settings in the profile of the specific user. */
    NotificationsUserProfile: {
      id?: string;
      notifyOnOwnChanges?: boolean;
      jabberNotificationsEnabled?: boolean;
      emailNotificationsEnabled?: boolean;
      mentionNotificationsEnabled?: boolean;
      duplicateClusterNotificationsEnabled?: boolean;
      mailboxIntegrationNotificationsEnabled?: boolean;
      usePlainTextEmails?: boolean;
      autoWatchOnComment?: boolean;
      autoWatchOnCreate?: boolean;
      autoWatchOnVote?: boolean;
      autoWatchOnUpdate?: boolean;
      $type?: string;
    };
    /** @description Stores number of online user. */
    OnlineUsers: {
      id?: string;
      /** Format: int32 */
      users?: number;
      $type?: string;
    };
    /** @description Represents a set of owned values in YouTrack. */
    OwnedBundle: components["schemas"]["BaseBundle"] & {
      id?: string;
      values?: (components["schemas"]["OwnedBundleElement"])[];
    };
    /** @description Default settings for the owned-type field. */
    OwnedBundleCustomFieldDefaults: components["schemas"]["BundleCustomFieldDefaults"] & {
      id?: string;
      bundle?: components["schemas"]["OwnedBundle"];
      defaultValues?: (components["schemas"]["OwnedBundleElement"])[];
    };
    /** @description Represents a single owned value of a set. For example, a subsystem. */
    OwnedBundleElement: {
      $type: "OwnedBundleElement";
    } & Omit<components["schemas"]["BundleElement"], "$type"> & {
      id?: string;
      owner?: components["schemas"]["User"];
    };
    /** @description Represents project settings for an owned field. */
    OwnedProjectCustomField: components["schemas"]["BundleProjectCustomField"] & {
      id?: string;
      bundle?: components["schemas"]["OwnedBundle"];
      defaultValues?: (components["schemas"]["OwnedBundleElement"])[];
    };
    /** @description Represents the command that was parsed from the provided query. */
    ParsedCommand: {
      id?: string;
      description?: string;
      error?: boolean;
      delete?: boolean;
      $type?: string;
    };
    /** @description Represents the format, in which the period values are displayed to the user. */
    PeriodFieldFormat: {
      id?: string;
      $type?: string;
    };
    /** @description Represents the period field in the issue. */
    PeriodIssueCustomField: {
      $type: "PeriodIssueCustomField";
    } & Omit<components["schemas"]["IssueCustomField"], "$type"> & {
      id?: string;
      value?: components["schemas"]["PeriodValue"];
    };
    /** @description Represents project settings for the period field. */
    PeriodProjectCustomField: {
      $type: "PeriodProjectCustomField";
    } & Omit<components["schemas"]["ProjectCustomField"], "$type"> & {
      id?: string;
    };
    /** @description Represents the period field value. */
    PeriodValue: {
      id?: string;
      /** Format: int32 */
      minutes?: number;
      presentation?: string;
      $type?: string;
    };
    /**
     * @description Represents a predefined field of the issue. Predefined fields are always present in an issue and
     *             |cannot be customized in a project. For example, `project`, `created`,
     *             |`updated`, `tags`, and so on.
     */
    PredefinedFilterField: {
      $type: "PredefinedFilterField";
    } & Omit<components["schemas"]["FilterField"], "$type"> & {
      id?: string;
    };
    /** @description Represents a YouTrack project. */
    Project: {
      $type: "Project";
    } & Omit<components["schemas"]["IssueFolder"], "$type"> & {
      id?: string;
      /** Format: int64 */
      startingNumber?: number;
      shortName?: string;
      description?: string;
      leader?: components["schemas"]["User"];
      createdBy?: components["schemas"]["User"];
      issues?: (components["schemas"]["Issue"])[];
      customFields?: Record<string, never>;
      archived?: boolean;
      fromEmail?: string;
      replyToEmail?: string;
      template?: boolean;
      iconUrl?: string;
      team?: components["schemas"]["UserGroup"];
    };
    /** @description Represents the change in the project attribute on an Issue. */
    ProjectActivityItem: components["schemas"]["SingleValueActivityItem"] & {
      id?: string;
      target?: components["schemas"]["Issue"];
      removed?: Record<string, never>;
      added?: Record<string, never>;
    };
    /** @description Lets you set a color for a card based on its project. */
    ProjectBasedColorCoding: {
      $type: "ProjectBasedColorCoding";
    } & Omit<components["schemas"]["ColorCoding"], "$type"> & {
      id?: string;
      projectColors?: (components["schemas"]["ProjectColor"])[];
    };
    /** @description Represents color setting for one project on the board. */
    ProjectColor: {
      id?: string;
      project?: components["schemas"]["Project"];
      color?: components["schemas"]["FieldStyle"];
      $type?: string;
    };
    /** @description Represents settings for custom fields in a particular project. */
    ProjectCustomField: {
      id?: string;
      field?: components["schemas"]["CustomField"];
      project?: components["schemas"]["Project"];
      canBeEmpty?: boolean;
      emptyFieldText?: string;
      /** Format: int32 */
      ordinal?: number;
      isPublic?: boolean;
      hasRunningJob?: boolean;
      condition?: components["schemas"]["CustomFieldCondition"];
      $type?: string;
    };
    /** @description Represents time tracking settings of the project. */
    ProjectTimeTrackingSettings: {
      id?: string;
      enabled?: boolean;
      estimate?: components["schemas"]["ProjectCustomField"];
      timeSpent?: components["schemas"]["ProjectCustomField"];
      workItemTypes?: (components["schemas"]["WorkItemType"])[];
      project?: components["schemas"]["Project"];
      attributes?: (components["schemas"]["WorkItemProjectAttribute"])[];
      $type?: string;
    };
    /** @description Represents the Resource Sharing (CORS) configuration of the service. */
    RestCorsSettings: {
      id?: string;
      allowedOrigins?: (string)[];
      allowAllOrigins?: boolean;
      $type?: string;
    };
    /** @description Represents a saved search. */
    SavedQuery: components["schemas"]["WatchFolder"] & {
      id?: string;
      query?: string;
      issues?: readonly (components["schemas"]["Issue"])[];
      visibleFor?: components["schemas"]["UserGroup"];
      updateableBy?: components["schemas"]["UserGroup"];
      readSharingSettings?: components["schemas"]["WatchFolderSharingSettings"];
      updateSharingSettings?: components["schemas"]["WatchFolderSharingSettings"];
    };
    /** @description Represents the list of search suggestions for the currently entered search query. */
    SearchSuggestions: {
      id?: string;
      /** Format: int32 */
      caret?: number;
      ignoreUnresolvedSetting?: boolean;
      query?: string;
      suggestions?: readonly (components["schemas"]["Suggestion"])[];
      folders?: (components["schemas"]["IssueFolder"])[];
      $type?: string;
    };
    /** @description Represents a simple-type custom field in the issue. */
    SimpleIssueCustomField: {
      $type: "SimpleIssueCustomField";
    } & Omit<components["schemas"]["IssueCustomField"], "$type"> & {
      id?: string;
      value?: Record<string, never>;
    };
    /** @description Represents project settings for the fields of the following types: `integer`, `float`, `date`, `date and time`, `string`. */
    SimpleProjectCustomField: {
      $type: "SimpleProjectCustomField";
    } & Omit<components["schemas"]["ProjectCustomField"], "$type"> & {
      id?: string;
    };
    /**
     * @description Represents the change in attributes of a simple type in the target entity:
     * Issue, IssueComment, WorkItem, IssueAttachment.
     */
    SimpleValueActivityItem: components["schemas"]["SingleValueActivityItem"] & {
      id?: string;
      removed?: Record<string, never>;
      added?: Record<string, never>;
    };
    /** @description Represents a single-value build-type custom field in the issue. */
    SingleBuildIssueCustomField: components["schemas"]["DatabaseSingleValueIssueCustomField"] & {
      id?: string;
      value?: components["schemas"]["BuildBundleElement"];
    };
    /** @description Represents a single-value enum-type custom field in the issue. */
    SingleEnumIssueCustomField: components["schemas"]["DatabaseSingleValueIssueCustomField"] & {
      id?: string;
      value?: components["schemas"]["EnumBundleElement"];
    };
    /** @description Represents a single-value group-type custom field in the issue. */
    SingleGroupIssueCustomField: components["schemas"]["DatabaseSingleValueIssueCustomField"] & {
      id?: string;
      value?: components["schemas"]["UserGroup"];
    };
    /** @description Represents a single-value owned-type custom field in the issue. */
    SingleOwnedIssueCustomField: components["schemas"]["DatabaseSingleValueIssueCustomField"] & {
      id?: string;
      value?: components["schemas"]["OwnedBundleElement"];
    };
    /** @description Represents a single-value user-type custom field in the issue. */
    SingleUserIssueCustomField: components["schemas"]["DatabaseSingleValueIssueCustomField"] & {
      id?: string;
      value?: components["schemas"]["User"];
    };
    /** @description Describe change of properties that can have single value. */
    SingleValueActivityItem: {
      $type: "SingleValueActivityItem";
    } & Omit<components["schemas"]["ActivityItem"], "$type"> & {
      id?: string;
      removed?: Record<string, never>;
      added?: Record<string, never>;
    };
    /** @description Represents a a single-value custom field in the issue. */
    DatabaseSingleValueIssueCustomField: {
      $type: "DatabaseSingleValueIssueCustomField";
    } & Omit<components["schemas"]["IssueCustomField"], "$type"> & {
      id?: string;
      value?: Record<string, never>;
    };
    /** @description Represents a single-value version-type custom field in the issue. */
    SingleVersionIssueCustomField: components["schemas"]["DatabaseSingleValueIssueCustomField"] & {
      id?: string;
      value?: components["schemas"]["VersionBundleElement"];
    };
    /** @description Represents a Space integration configured for a project. */
    SpaceChangesProcessor: components["schemas"]["VcsHostingChangesProcessor"] & {
      id?: string;
      server?: components["schemas"]["SpaceServer"];
    };
    /** @description Represents a Space server. */
    SpaceServer: components["schemas"]["VcsHostingServer"] & {
      id?: string;
      url?: string;
    };
    /** @description Represents a sprint that is associated with an agile board. Each sprint can include issues from one or more projects. */
    Sprint: {
      id?: string;
      agile?: components["schemas"]["Agile"];
      name?: string;
      goal?: string;
      /** Format: int64 */
      start?: number;
      /** Format: int64 */
      finish?: number;
      archived?: boolean;
      isDefault?: boolean;
      issues?: (components["schemas"]["Issue"])[];
      /** Format: int32 */
      unresolvedIssuesCount?: number;
      previousSprint?: components["schemas"]["Sprint"];
      $type?: string;
    };
    /** @description Represents a change in the issue when it was added to or removed from an agile board sprint. */
    SprintActivityItem: components["schemas"]["MultiValueActivityItem"] & {
      id?: string;
      target?: components["schemas"]["Issue"];
      removed?: readonly (components["schemas"]["Sprint"])[];
      added?: readonly (components["schemas"]["Sprint"])[];
    };
    /** @description Describes sprints configuration. */
    SprintsSettings: {
      id?: string;
      isExplicit?: boolean;
      cardOnSeveralSprints?: boolean;
      defaultSprint?: components["schemas"]["Sprint"];
      disableSprints?: boolean;
      explicitQuery?: string;
      sprintSyncField?: components["schemas"]["CustomField"];
      hideSubtasksOfCards?: boolean;
      $type?: string;
    };
    /** @description Represents a set of states in YouTrack. */
    StateBundle: components["schemas"]["BaseBundle"] & {
      id?: string;
      values?: (components["schemas"]["StateBundleElement"])[];
    };
    /** @description Default settings for the state-type field. */
    StateBundleCustomFieldDefaults: components["schemas"]["BundleCustomFieldDefaults"] & {
      id?: string;
      bundle?: components["schemas"]["StateBundle"];
      defaultValues?: (components["schemas"]["StateBundleElement"])[];
    };
    /** @description Represents the state of an issue in YouTrack. */
    StateBundleElement: components["schemas"]["LocalizableBundleElement"] & {
      id?: string;
      isResolved?: boolean;
    };
    /** @description Represents a single-value state-type custom field in the issue. */
    StateIssueCustomField: components["schemas"]["DatabaseSingleValueIssueCustomField"] & {
      id?: string;
      value?: components["schemas"]["StateBundleElement"];
    };
    /** @description Represents the issue custom field that is managed by a state-machine rule in workflow. */
    StateMachineIssueCustomField: components["schemas"]["DatabaseSingleValueIssueCustomField"] & {
      id?: string;
      value?: Record<string, never>;
      event?: components["schemas"]["Event"];
      possibleEvents?: readonly (components["schemas"]["Event"])[];
    };
    /** @description Represents project settings for a state field. */
    StateProjectCustomField: components["schemas"]["BundleProjectCustomField"] & {
      id?: string;
      bundle?: components["schemas"]["StateBundle"];
      defaultValues?: (components["schemas"]["StateBundleElement"])[];
    };
    /** @description SSL key representation. */
    StorageEntry: {
      id?: string;
      name?: string;
      $type?: string;
    };
    /** @description Represents query suggestion. */
    Suggestion: {
      id?: string;
      /** Format: int32 */
      completionStart?: number;
      /** Format: int32 */
      completionEnd?: number;
      /** Format: int32 */
      matchingStart?: number;
      /** Format: int32 */
      matchingEnd?: number;
      /** Format: int32 */
      caret?: number;
      description?: string;
      option?: string;
      prefix?: string;
      suffix?: string;
      group?: string;
      icon?: string;
      auxiliaryIcon?: string;
      className?: string;
      $type?: string;
    };
    /** @description Represents a single swimlane in case of AttributeBasedSwimlaneSettings. */
    SwimlaneEntityAttributeValue: {
      $type: "SwimlaneEntityAttributeValue";
    } & Omit<components["schemas"]["DatabaseAttributeValue"], "$type"> & {
      id?: string;
      name?: string;
      isResolved?: boolean;
    };
    /** @description Base entity for different swimlane settings */
    SwimlaneSettings: {
      id?: string;
      enabled?: boolean;
      $type?: string;
    };
    /** @description Represents single swimlane in case of IssueBasedSwimlaneSettings. */
    SwimlaneValue: {
      id?: string;
      name?: string;
      $type?: string;
    };
    /** @description Represents the System settings that affect core functionality of YouTrack. */
    SystemSettings: {
      id?: string;
      baseUrl?: string;
      /** Format: int64 */
      maxUploadFileSize?: number;
      /** Format: int32 */
      maxExportItems?: number;
      administratorEmail?: string;
      allowStatisticsCollection?: boolean;
      isApplicationReadOnly?: boolean;
      $type?: string;
    };
    /** @description Stores users and groups that have access to a tag. */
    TagSharingSettings: {
      id?: string;
      permittedGroups?: (components["schemas"]["UserGroup"])[];
      permittedUsers?: (components["schemas"]["User"])[];
      $type?: string;
    };
    /** @description Represents a change in the list of tags of an issue. */
    TagsActivityItem: components["schemas"]["MultiValueActivityItem"] & {
      id?: string;
      target?: components["schemas"]["Issue"];
      removed?: readonly (components["schemas"]["IssueTag"])[];
      added?: readonly (components["schemas"]["IssueTag"])[];
    };
    /** @description Represents a TeamCity integration configured for a project. */
    TeamcityChangesProcessor: {
      $type: "TeamcityChangesProcessor";
    } & Omit<components["schemas"]["ChangesProcessor"], "$type"> & {
      id?: string;
      server?: components["schemas"]["TeamcityServer"];
    };
    /** @description Represents a TeamCity server. */
    TeamcityServer: {
      $type: "TeamcityServer";
    } & Omit<components["schemas"]["VcsServer"], "$type"> & {
      id?: string;
      url?: string;
    };
    /** @description Telemetry data of the YouTrack installation. */
    Telemetry: {
      id?: string;
      installationFolder?: string;
      databaseLocation?: string;
      logsLocation?: string;
      /** Format: int32 */
      availableProcessors?: number;
      availableMemory?: string;
      allocatedMemory?: string;
      usedMemory?: string;
      uptime?: string;
      /** Format: int64 */
      startedTime?: number;
      /** Format: int32 */
      databaseBackgroundThreads?: number;
      /** Format: int32 */
      pendingAsyncJobs?: number;
      /** Format: int32 */
      cachedResultsCountInDBQueriesCache?: number;
      databaseQueriesCacheHitRate?: string;
      blobStringsCacheHitRate?: string;
      /** Format: int64 */
      totalTransactions?: number;
      transactionsPerSecond?: string;
      requestsPerSecond?: string;
      databaseSize?: string;
      fullDatabaseSize?: string;
      textIndexSize?: string;
      onlineUsers?: components["schemas"]["OnlineUsers"];
      /** Format: int32 */
      reportCalculatorThreads?: number;
      /** Format: int32 */
      notificationAnalyzerThreads?: number;
      $type?: string;
    };
    /** @description Represents an activity that affects a custom field of the `text` type of an issue. */
    TextCustomFieldActivityItem: components["schemas"]["CustomFieldActivityItem"] & {
      id?: string;
      target?: components["schemas"]["Issue"];
      removed?: string;
      added?: string;
      markup?: string;
    };
    /** @description Represents a value of the text field. Returns both source and rendered text. */
    TextFieldValue: {
      id?: string;
      text?: string;
      markdownText?: string;
      $type?: string;
    };
    /** @description Represents the issue custom field of the `text` type. */
    TextIssueCustomField: {
      $type: "TextIssueCustomField";
    } & Omit<components["schemas"]["IssueCustomField"], "$type"> & {
      id?: string;
      value?: components["schemas"]["TextFieldValue"];
    };
    /**
     * @description Represents a change in a `String`-type attribute with the support of markup:
     * `description` in an Issue or IssueWorkItem, and the `text` of the IssueComment.
     * This entity lets you get the rendered text after the change.
     */
    TextMarkupActivityItem: components["schemas"]["SimpleValueActivityItem"] & {
      id?: string;
      removed?: string;
      added?: string;
      markup?: string;
    };
    /** @description Represents settings of the text-type field in the project. */
    TextProjectCustomField: components["schemas"]["SimpleProjectCustomField"] & {
      id?: string;
    };
    /** @description Represents time tracking settings in the user's profile. */
    TimeTrackingUserProfile: {
      id?: string;
      periodFormat?: components["schemas"]["PeriodFieldFormat"];
      $type?: string;
    };
    /** @description Represents a time zone. */
    TimeZoneDescriptor: {
      id?: string;
      presentation?: string;
      /** Format: int32 */
      offset?: number;
      $type?: string;
    };
    /** @description Represents unlimited visibility. When access to an entity is not restricted, the visibility attribute of this entity has the type `UnlimitedVisibility`. Entities of this type do not have any attributes. */
    UnlimitedVisibility: {
      $type: "UnlimitedVisibility";
    } & Omit<components["schemas"]["Visibility"], "$type">;
    /** @description Represents an Upsource integration configured for a project. */
    UpsourceChangesProcessor: {
      $type: "UpsourceChangesProcessor";
    } & Omit<components["schemas"]["ChangesProcessor"], "$type"> & {
      id?: string;
      server?: components["schemas"]["UpsourceServer"];
    };
    /** @description Represents an Upsource server. */
    UpsourceServer: {
      $type: "UpsourceServer";
    } & Omit<components["schemas"]["VcsServer"], "$type"> & {
      id?: string;
      url?: string;
    };
    /**
     * @description Represents a user in YouTrack. Please note that the read-only properties of a user account, like 
     *             credentials, or email and so on, you can only change in  
     *             <a href="https://www.jetbrains.com/help/youtrack/devportal/?Hub-REST-API">Hub REST API</a>.
     */
    User: {
      id?: string;
      login?: string;
      fullName?: string;
      email?: string;
      jabberAccountName?: string;
      ringId?: string;
      guest?: boolean;
      online?: boolean;
      banned?: boolean;
      tags?: readonly (components["schemas"]["IssueTag"])[];
      savedQueries?: readonly (components["schemas"]["SavedQuery"])[];
      avatarUrl?: string;
      profiles?: components["schemas"]["UserProfiles"];
      $type?: string;
    };
    /** @description Represents a set of values that contains users. You can add to the set both individual user accounts and groups of users. */
    UserBundle: {
      $type: "UserBundle";
    } & Omit<components["schemas"]["Bundle"], "$type"> & {
      id?: string;
      groups?: (components["schemas"]["UserGroup"])[];
      individuals?: (components["schemas"]["User"])[];
      aggregatedUsers?: readonly (components["schemas"]["User"])[];
    };
    /** @description Represents default settings for the user-type field. */
    UserCustomFieldDefaults: {
      $type: "UserCustomFieldDefaults";
    } & Omit<components["schemas"]["CustomFieldDefaults"], "$type"> & {
      id?: string;
      bundle?: components["schemas"]["UserBundle"];
      defaultValues?: (components["schemas"]["User"])[];
    };
    /** @description Represents a group of users. */
    UserGroup: {
      id?: string;
      name?: string;
      ringId?: string;
      /** Format: int64 */
      usersCount?: number;
      icon?: string;
      allUsersGroup?: boolean;
      teamForProject?: components["schemas"]["Project"];
      $type?: string;
    };
    /** @description Represents a group of settings of a user profile in YouTrack. */
    UserProfiles: {
      id?: string;
      general?: components["schemas"]["GeneralUserProfile"];
      notifications?: components["schemas"]["NotificationsUserProfile"];
      timetracking?: components["schemas"]["TimeTrackingUserProfile"];
      $type?: string;
    };
    /** @description Represents project settings for a user field. */
    UserProjectCustomField: components["schemas"]["BundleProjectCustomField"] & {
      id?: string;
      bundle?: components["schemas"]["UserBundle"];
      defaultValues?: (components["schemas"]["User"])[];
    };
    /**
     * @description Represents the change of the boolean flag that indicates whether YouTrack Wiki or Markdown
     * is used in the target entity as a markup language. If "true", then the markdown is used.
     * Otherwise, YouTrack Wiki markup.
     */
    UsesMarkupActivityItem: components["schemas"]["SimpleValueActivityItem"] & {
      id?: string;
      removed?: boolean;
      added?: boolean;
      markup?: string;
    };
    /** @description Represents a VCS change linked to an issue. */
    VcsChange: {
      id?: string;
      /** Format: int64 */
      date?: number;
      /** Format: int64 */
      fetched?: number;
      /** Format: int32 */
      files?: number;
      author?: components["schemas"]["User"];
      processors?: readonly (components["schemas"]["ChangesProcessor"])[];
      text?: string;
      urls?: readonly (string)[];
      version?: string;
      issue?: components["schemas"]["Issue"];
      /** Format: int32 */
      state?: number;
      $type?: string;
    };
    /** @description Represents an update in the list of VCS changes of an issue. */
    VcsChangeActivityItem: components["schemas"]["CreatedDeletedActivityItem"] & {
      id?: string;
      removed?: readonly (components["schemas"]["VcsChange"])[];
      added?: readonly (components["schemas"]["VcsChange"])[];
      author?: components["schemas"]["User"];
    };
    /** @description The basic entity that represents a VCS integration configured for a project. */
    VcsHostingChangesProcessor: {
      $type: "VcsHostingChangesProcessor";
    } & Omit<components["schemas"]["ChangesProcessor"], "$type"> & {
      id?: string;
      server?: components["schemas"]["VcsHostingServer"];
      path?: string;
      branchSpecification?: string;
      committers?: components["schemas"]["UserGroup"];
    };
    /** @description The basic entity that represents a VCS server. */
    VcsHostingServer: {
      $type: "VcsHostingServer";
    } & Omit<components["schemas"]["VcsServer"], "$type"> & {
      id?: string;
      url?: string;
    };
    /** @description The basic entity that represents a VCS or a build server. */
    VcsServer: {
      id?: string;
      url?: string;
      $type?: string;
    };
    /** @description Represents a VCS change author who could not be associated with any YouTrack user account. */
    VcsUnresolvedUser: {
      $type: "VcsUnresolvedUser";
    } & Omit<components["schemas"]["User"], "$type"> & {
      id?: string;
      name?: string;
    };
    /** @description Represents a set of versions in YouTrack. */
    VersionBundle: components["schemas"]["BaseBundle"] & {
      id?: string;
      values?: (components["schemas"]["VersionBundleElement"])[];
    };
    /** @description Default settings for the version-type field. */
    VersionBundleCustomFieldDefaults: components["schemas"]["BundleCustomFieldDefaults"] & {
      id?: string;
      bundle?: components["schemas"]["VersionBundle"];
      defaultValues?: (components["schemas"]["VersionBundleElement"])[];
    };
    /** @description Represents a version in YouTrack. */
    VersionBundleElement: {
      $type: "VersionBundleElement";
    } & Omit<components["schemas"]["BundleElement"], "$type"> & {
      id?: string;
      archived?: boolean;
      /** Format: int64 */
      releaseDate?: number;
      released?: boolean;
    };
    /** @description Represents project settings for a version field. */
    VersionProjectCustomField: components["schemas"]["BundleProjectCustomField"] & {
      id?: string;
      bundle?: components["schemas"]["VersionBundle"];
      defaultValues?: (components["schemas"]["VersionBundleElement"])[];
    };
    /** @description Represents visibility settings of an entity, for example, an issue or a comment. */
    Visibility: {
      id?: string;
      $type?: string;
    };
    /**
     * @description Represents the changes of properties responsible for visibility restriction.
     * Can be <a href="api-entity-VisibilityGroupActivityItem.xml">VisibilityGroupActivityItem</a> or <a href="api-entity-VisibilityUserActivityItem.xml">VisibilityUserActivityItem</a>
     */
    VisibilityActivityItem: components["schemas"]["MultiValueActivityItem"] & {
      id?: string;
      targetMember?: string;
      targetSubMember?: string;
    };
    /** @description Represents the event when a user adds or removes a group to/from the Visibility settings of the target entity. */
    VisibilityGroupActivityItem: components["schemas"]["VisibilityActivityItem"] & {
      id?: string;
      targetMember?: string;
      targetSubMember?: string;
      removed?: readonly (components["schemas"]["UserGroup"])[];
      added?: readonly (components["schemas"]["UserGroup"])[];
    };
    /** @description Represents the event when a user adds or removes a user to/from the Visibility settings of the target entity. */
    VisibilityUserActivityItem: components["schemas"]["VisibilityActivityItem"] & {
      id?: string;
      targetMember?: string;
      targetSubMember?: string;
      removed?: readonly (components["schemas"]["User"])[];
      added?: readonly (components["schemas"]["User"])[];
    };
    /** @description Represents a change in the list of voters of an issue. */
    VotersActivityItem: components["schemas"]["MultiValueActivityItem"] & {
      id?: string;
      target?: components["schemas"]["Issue"];
      removed?: readonly (components["schemas"]["User"])[];
      added?: readonly (components["schemas"]["User"])[];
    };
    /** @description Represents WIP limits for particular column. If they are not satisfied, the column will be highlighted in UI. */
    WIPLimit: {
      id?: string;
      /** Format: int32 */
      max?: number;
      /** Format: int32 */
      min?: number;
      column?: components["schemas"]["AgileColumn"];
      $type?: string;
    };
    /**
     * @description A `WatchFolder` is an `IssueFolder` that lets you enable notifications for a set 
     * of issues that it enfolds. It is a common abstract ancestor for saved searches and issue tags.
     */
    WatchFolder: {
      $type: "WatchFolder";
    } & Omit<components["schemas"]["IssueFolder"], "$type"> & {
      id?: string;
      owner?: components["schemas"]["User"];
      visibleFor?: components["schemas"]["UserGroup"];
      updateableBy?: components["schemas"]["UserGroup"];
      readSharingSettings?: components["schemas"]["WatchFolderSharingSettings"];
      updateSharingSettings?: components["schemas"]["WatchFolderSharingSettings"];
    };
    /** @description Stores users and groups that have access to a tag or a saved search. */
    WatchFolderSharingSettings: {
      id?: string;
      permittedGroups?: (components["schemas"]["UserGroup"])[];
      permittedUsers?: (components["schemas"]["User"])[];
      $type?: string;
    };
    /** @description Represents a change in a list of work items in an issue. */
    WorkItemActivityItem: components["schemas"]["CreatedDeletedActivityItem"] & {
      id?: string;
      target?: components["schemas"]["IssueWorkItem"];
      removed?: readonly (components["schemas"]["IssueWorkItem"])[];
      added?: readonly (components["schemas"]["IssueWorkItem"])[];
    };
    /** @description Represents the attribute of a specific work item. */
    WorkItemAttribute: {
      id?: string;
      workItem?: components["schemas"]["BaseWorkItem"];
      projectAttribute?: components["schemas"]["WorkItemProjectAttribute"];
      value?: components["schemas"]["WorkItemAttributeValue"];
      name?: string;
      $type?: string;
    };
    /** @description Represents a work item attribute prototype that is common for all projects. The project-related settings for work item attributes are stored in the `WorkItemProjectAttribute` entities. */
    WorkItemAttributePrototype: {
      id?: string;
      name?: string;
      instances?: (components["schemas"]["WorkItemProjectAttribute"])[];
      values?: (components["schemas"]["WorkItemAttributeValue"])[];
      $type?: string;
    };
    /** @description Represents a value of a work item attribute. */
    WorkItemAttributeValue: {
      id?: string;
      name?: string;
      description?: string;
      autoAttach?: boolean;
      prototype?: components["schemas"]["WorkItemAttributePrototype"];
      $type?: string;
    };
    /** @description Represents a change in the `author` attribute of a work item. */
    WorkItemAuthorActivityItem: components["schemas"]["SingleValueActivityItem"] & {
      id?: string;
      target?: components["schemas"]["IssueWorkItem"];
      removed?: components["schemas"]["User"];
      added?: components["schemas"]["User"];
    };
    /** @description Represents a change in the `duration` attribute of a work item. */
    WorkItemDurationActivityItem: components["schemas"]["SingleValueActivityItem"] & {
      id?: string;
      target?: components["schemas"]["IssueWorkItem"];
      removed?: components["schemas"]["DurationValue"];
      added?: components["schemas"]["DurationValue"];
    };
    /** @description Represents the project-related settings of a work item attribute. */
    WorkItemProjectAttribute: {
      id?: string;
      timeTrackingSettings?: components["schemas"]["ProjectTimeTrackingSettings"];
      prototype?: components["schemas"]["WorkItemAttributePrototype"];
      values?: (components["schemas"]["WorkItemAttributeValue"])[];
      name?: string;
      /** Format: int32 */
      ordinal?: number;
      $type?: string;
    };
    /** @description Represents a work type that can be assigned to a work item. */
    WorkItemType: {
      id?: string;
      name?: string;
      autoAttached?: boolean;
      $type?: string;
    };
    /** @description Represents a change in the `type` attribute of the work item. */
    WorkItemTypeActivityItem: components["schemas"]["MultiValueActivityItem"] & {
      id?: string;
      target?: components["schemas"]["IssueWorkItem"];
      removed?: readonly (components["schemas"]["WorkItemType"])[];
      added?: readonly (components["schemas"]["WorkItemType"])[];
    };
    /** @description Work schedule settings. */
    WorkTimeSettings: {
      id?: string;
      /** Format: int32 */
      minutesADay?: number;
      workDays?: (number)[];
      /** Format: int32 */
      firstDayOfWeek?: number;
      /** Format: int32 */
      daysAWeek?: number;
      $type?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
